'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../_virtual/_tslib.cjs');
var React = require('react');
require('../../context/DynamicContext/DynamicContext.cjs');
require('@dynamic-labs/sdk-api');
require('../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
require('../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
var localStorage$1 = require('../../utils/constants/localStorage.cjs');
require('../../utils/constants/colors.cjs');
require('../../utils/constants/values.cjs');
var localStorage = require('../../shared/utils/classes/storage/localStorage.cjs');
require('@dynamic-labs/utils');
require('../../shared/consts/index.cjs');
require('../../events/dynamicEvents.cjs');
require('../../context/CaptchaContext/CaptchaContext.cjs');
require('../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
var isTurnkeyEnabled = require('../../utils/functions/isTurnkeyEnabled/isTurnkeyEnabled.cjs');
require('viem');
require('viem/chains');
var isCoinbaseWaasEnabled = require('../../utils/functions/isCoinbaseWaasEnabled/isCoinbaseWaasEnabled.cjs');
require('../../config/ApiEndpoint.cjs');
require('../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
var useEmbeddedWallet = require('../../utils/hooks/useEmbeddedWallet/useEmbeddedWallet.cjs');
require('../../context/ThemeContext/ThemeContext.cjs');
require('@dynamic-labs/types');
require('yup');
require('react-i18next');
require('../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../context/MockContext/MockContext.cjs');
require('../../utils/hooks/useUserUpdateRequest/useUpdateUser/useUpdateUser.cjs');
require('../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../Alert/Alert.cjs');
require('../ShadowDOM/ShadowDOM.cjs');
require('../IconButton/IconButton.cjs');
require('../InlineWidget/InlineWidget.cjs');
require('../Input/Input.cjs');
require('../IsBrowser/IsBrowser.cjs');
require('../MenuList/Dropdown/Dropdown.cjs');
require('../Transition/ZoomTransition/ZoomTransition.cjs');
require('../Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../Transition/OpacityTransition/OpacityTransition.cjs');
require('../OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
require('../PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../PhoneNumberField/usePhoneInputLogic/usePhoneInputLogic.cjs');
require('../Popper/Popper/Popper.cjs');
require('../Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
var WalletContext = require('../../context/WalletContext/WalletContext.cjs');
require('formik');
require('../../views/WalletList/WalletList.cjs');
require('../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('i18next');
require('@hcaptcha/react-hcaptcha');
require('../../context/LoadingContext/LoadingContext.cjs');
require('../../context/FooterAnimationContext/index.cjs');
require('../../locale/locale.cjs');
require('../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../context/PasskeyContext/PasskeyContext.cjs');
require('../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../views/TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
var useInternalDynamicContext = require('../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');

const SyncEmbeddedWalletAuthFlow = () => {
    const { projectSettings, isProjectSettingsLoading, user, primaryWalletId, walletConnectorOptions, } = useInternalDynamicContext.useInternalDynamicContext();
    const { isLoadingEmbeddedWallet } = WalletContext.useWalletContext();
    const lastUsedWallet = localStorage.LocalStorage.getFromLS(localStorage$1.LAST_USED_WALLET);
    const { createEmbeddedWallet } = useEmbeddedWallet.useEmbeddedWallet();
    const triggeredCreate = React.useRef(false);
    // this is used to trigger createEmbeddedWallet
    // when user didn't create a passkey after login and refresh page to skip it
    // we force them to created it before they can use the app
    // ** It must be an useEffect because some of the dependencies are async
    React.useEffect(() => {
        var _a, _b, _c, _d, _e, _f;
        const createWallet = () => _tslib.__awaiter(void 0, void 0, void 0, function* () {
            triggeredCreate.current = true;
            try {
                yield createEmbeddedWallet();
            }
            catch (error) {
                return;
            }
        });
        const hasEmbeddedWalletProviderEnabled = isTurnkeyEnabled.isTurnkeyEnabled(projectSettings) ||
            isCoinbaseWaasEnabled.isCoinbaseWaasEnabled(projectSettings);
        if (!user ||
            isProjectSettingsLoading ||
            !projectSettings ||
            !hasEmbeddedWalletProviderEnabled ||
            !walletConnectorOptions.length || // no connectors to use for the embedded wallet
            primaryWalletId || //should not override primary wallet
            isLoadingEmbeddedWallet || // already has a wallet
            lastUsedWallet !== undefined || //untill embedded wallet is generated it's undefined
            triggeredCreate.current // already triggered
        ) {
            return;
        }
        // Turnkey specific rules
        if (
        // if coinbase is enabled it should still call createWallet, despite the turnkey rules
        !isCoinbaseWaasEnabled.isCoinbaseWaasEnabled(projectSettings) &&
            isTurnkeyEnabled.isTurnkeyEnabled(projectSettings) &&
            // If customer allows user to skip passkey creation, don't trigger createEmbeddedWallet on refresh
            (!((_b = (_a = projectSettings.sdk) === null || _a === void 0 ? void 0 : _a.embeddedWallets) === null || _b === void 0 ? void 0 : _b.automaticEmbeddedWalletCreation) ||
                ((_d = (_c = projectSettings.sdk) === null || _c === void 0 ? void 0 : _c.embeddedWallets) === null || _d === void 0 ? void 0 : _d.allowSkippingAuthenticatorAtSignup) ||
                !((_f = (_e = projectSettings.sdk) === null || _e === void 0 ? void 0 : _e.embeddedWallets) === null || _f === void 0 ? void 0 : _f.forceAuthenticatorAtSignup))) {
            return;
        }
        createWallet();
    }, [
        user,
        isProjectSettingsLoading,
        projectSettings,
        primaryWalletId,
        lastUsedWallet,
        createEmbeddedWallet,
        isLoadingEmbeddedWallet,
        walletConnectorOptions,
    ]);
    return null;
};

exports.SyncEmbeddedWalletAuthFlow = SyncEmbeddedWalletAuthFlow;
