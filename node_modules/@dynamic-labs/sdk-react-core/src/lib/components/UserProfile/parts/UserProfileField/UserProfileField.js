import { jsxs, jsx } from 'react/jsx-runtime';
import { useTranslation } from 'react-i18next';
import 'react';
import '../../../../events/dynamicEvents.js';
import '../../../../../../_virtual/_tslib.js';
import '@dynamic-labs/utils';
import '../../../../context/DynamicContext/DynamicContext.js';
import '@dynamic-labs/sdk-api';
import '../../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import '../../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '../../../../utils/constants/colors.js';
import '../../../../utils/constants/values.js';
import '../../../../shared/utils/classes/storage/localStorage.js';
import '../../../../shared/consts/index.js';
import { useInternalDynamicContext } from '../../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.js';
import '../../../../context/CaptchaContext/CaptchaContext.js';
import '../../../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import { formatPhone } from '../../../../utils/functions/formatPhone/formatPhone.js';
import 'viem';
import 'viem/chains';
import '../../../../config/ApiEndpoint.js';
import '../../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../../../context/WalletContext/WalletContext.js';
import '../../../../context/ThemeContext/ThemeContext.js';
import '@dynamic-labs/types';
import 'yup';
import '../../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../../context/MockContext/MockContext.js';
import '../../../../utils/hooks/useUserUpdateRequest/useUpdateUser/useUpdateUser.js';
import '../../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../../context/UserWalletsContext/UserWalletsContext.js';
import 'i18next';
import { Typography } from '../../../Typography/Typography.js';
import '../../../ShadowDOM/ShadowDOM.js';
import '../../../Transition/ZoomTransition/ZoomTransition.js';
import '../../../Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../Transition/OpacityTransition/OpacityTransition.js';
import '../../../OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../../../context/FooterAnimationContext/index.js';
import '../../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import 'react-focus-lock';
import '../../../../context/LoadingContext/LoadingContext.js';
import '../../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../IconButton/IconButton.js';
import '../../../MenuList/Dropdown/Dropdown.js';
import { VerifiedUserFieldIcon } from './components/VerifiedUserFieldIcon/VerifiedUserFieldIcon.js';
import 'formik';
import '../../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../../Alert/Alert.js';
import '../../../Input/Input.js';
import '../../../PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../../context/PasskeyContext/PasskeyContext.js';
import '../../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import '../../../InlineWidget/InlineWidget.js';
import '../../../IsBrowser/IsBrowser.js';
import '../../../PhoneNumberField/usePhoneInputLogic/usePhoneInputLogic.js';
import '../../../Popper/Popper/Popper.js';
import '../../../Popper/PopperContext/PopperContext.js';
import 'qrcode';
import '../../../../views/WalletList/WalletList.js';
import '../../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../../../locale/locale.js';

const UserProfileField = ({ name, label, value, copykey, }) => {
    var _a, _b;
    const { user } = useInternalDynamicContext();
    const { t } = useTranslation();
    const isEmpty = value === '';
    const isPhoneNumber = name === 'phoneNumber' && typeof value === 'string';
    const isVerifiedEmail = name === 'email' &&
        (user === null || user === void 0 ? void 0 : user.email) &&
        ((_a = user === null || user === void 0 ? void 0 : user.verifiedCredentials) === null || _a === void 0 ? void 0 : _a.some((cred) => cred.email === value));
    const isVerifiedPhoneNumber = isPhoneNumber &&
        (user === null || user === void 0 ? void 0 : user.phoneNumber) &&
        ((_b = user === null || user === void 0 ? void 0 : user.verifiedCredentials) === null || _b === void 0 ? void 0 : _b.some((cred) => `+${cred.phoneCountryCode}${cred.phoneNumber}` === value));
    const toolTipContent = isVerifiedEmail
        ? t('dyn_user_profile.tooltips.verified_email')
        : t('dyn_user_profile.tooltips.verified_phone');
    return (jsxs("div", { className: 'user-profile-field', children: [label && (jsx(Typography, { as: 'h6', color: 'secondary', weight: 'regular', variant: 'body_small', copykey: copykey, children: label })), jsxs("div", { className: 'user-profile-field__value', children: [jsx(Typography, { color: isEmpty ? 'tertiary' : 'primary', as: 'p', weight: 'regular', variant: 'body_normal', children: isPhoneNumber ? formatPhone(value) : value }), (isVerifiedEmail || isVerifiedPhoneNumber) && (jsx(VerifiedUserFieldIcon, { className: 'user-profile-field__verify-icon', overwriteTooltipProps: { as: 'div' }, tooltipContent: toolTipContent, copykey: 'dyn_user_profile.tooltips' }))] })] }));
};

export { UserProfileField };
