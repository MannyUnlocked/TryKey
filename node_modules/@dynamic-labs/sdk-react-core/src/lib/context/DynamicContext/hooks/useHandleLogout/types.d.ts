import { Dispatch, SetStateAction } from 'react';
import { WalletConnectorCore } from '@dynamic-labs/wallet-connector-core';
import { AuthModeType, DynamicEventsCallbacks, UserProfile, Wallet } from '../../../../shared';
import { MultiWalletWidgetStateSetter } from '../../../../utils/hooks/multiWallet';
import { ChainsToConnect } from '../../types';
import { SetShowAuthFlow } from '../useShowAuthFlow';
export type UseHandleLogoutParams = {
    removeUser: () => void;
    clearAllWalletConnectSessions: () => void;
    setBridgeChainsToConnect: Dispatch<SetStateAction<ChainsToConnect[] | undefined>>;
    bridgeChains: ChainsToConnect[] | undefined;
    setShowDynamicUserProfile: Dispatch<SetStateAction<boolean>>;
    setShowBridgeWidget: Dispatch<SetStateAction<boolean>>;
    toolkitEnabled: boolean | undefined;
    user: UserProfile | undefined;
    environmentId: string;
    walletConnectors: WalletConnectorCore.WalletConnector[];
    connectedWallets: Wallet[];
    isVerificationInProgress: boolean;
    setIsVerificationInProgress: (newValue: boolean, checkWasSetOnDisable?: boolean | undefined) => void;
    setLegacyIsVerifying: Dispatch<SetStateAction<boolean>>;
    setAuthMode: (value: AuthModeType | ((val: AuthModeType) => AuthModeType)) => void;
    initialAuthenticationMode: AuthModeType;
    setShowAuthFlow: SetShowAuthFlow;
    setMultiWalletWidgetState: MultiWalletWidgetStateSetter;
    handleRemoveLsNetworks: () => void;
    setOnboardingOnlyJwt: Dispatch<SetStateAction<string | undefined>>;
    removeConnectedWalletsInfo: () => void;
    removeIsFullyConnected: () => void;
    clearPrimaryWalletId: () => void;
    removeConnectedNameService: () => void;
    eventsCallbacks: DynamicEventsCallbacks | undefined;
    resetLoginWithEmail: VoidFunction;
};
