'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../_virtual/_tslib.cjs');
var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var walletConnectorCore = require('@dynamic-labs/wallet-connector-core');
var sdkApi = require('@dynamic-labs/sdk-api');
var api = require('../../data/api.cjs');
require('../DynamicContext/DynamicContext.cjs');
require('../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('../ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../utils/constants/colors.cjs');
require('../../utils/constants/values.cjs');
require('../../shared/utils/classes/storage/localStorage.cjs');
require('@dynamic-labs/utils');
require('../../shared/consts/index.cjs');
require('../../events/dynamicEvents.cjs');
require('../CaptchaContext/CaptchaContext.cjs');
require('../ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
var isOnrampProvider = require('../../utils/functions/isOnrampProvider/isOnrampProvider.cjs');
var getWalletAdditionalAddressByType = require('../../utils/functions/getWalletAdditionalAddressByType/getWalletAdditionalAddressByType.cjs');
require('viem');
require('viem/chains');
require('../AccessDeniedContext/AccessDeniedContext.cjs');
require('../AccountExistsContext/AccountExistsContext.cjs');
require('../VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../WalletContext/WalletContext.cjs');
require('../ThemeContext/ThemeContext.cjs');
require('@dynamic-labs/types');
require('yup');
require('react-i18next');
require('../FieldsStateContext/FieldsStateContext.cjs');
require('../MockContext/MockContext.cjs');
require('../../utils/hooks/useUserUpdateRequest/useUpdateUser/useUpdateUser.cjs');
require('../UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../UserWalletsContext/UserWalletsContext.cjs');
require('../../components/Alert/Alert.cjs');
require('../../components/ShadowDOM/ShadowDOM.cjs');
require('../../components/IconButton/IconButton.cjs');
require('../../components/InlineWidget/InlineWidget.cjs');
require('../../components/Input/Input.cjs');
require('../../components/IsBrowser/IsBrowser.cjs');
require('../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../components/PhoneNumberField/usePhoneInputLogic/usePhoneInputLogic.cjs');
require('../../components/Popper/Popper/Popper.cjs');
require('../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../../views/WalletList/WalletList.cjs');
require('../SocialRedirectContext/SocialRedirectContext.cjs');
require('../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('i18next');
require('@hcaptcha/react-hcaptcha');
require('../LoadingContext/LoadingContext.cjs');
require('../../config/ApiEndpoint.cjs');
require('../FooterAnimationContext/index.cjs');
require('../../locale/locale.cjs');
require('../WalletGroupContext/WalletGroupContext.cjs');
require('../PasskeyContext/PasskeyContext.cjs');
require('../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../views/TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
var useInternalDynamicContext = require('../DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');

const FundingContext = React.createContext(undefined);
const FundingContextProvider = ({ children, }) => {
    var _a, _b;
    const fundingRef = React.useRef(null);
    const [showFunding, setShowFunding] = React.useState(false);
    const [supportsFunding, setSupportsFunding] = React.useState(false);
    const [fundingUrl, setFundingUrl] = React.useState('');
    const { environmentId, network, primaryWallet, projectSettings } = useInternalDynamicContext.useInternalDynamicContext();
    const fundingEnabled = (_b = (_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.providers) === null || _a === void 0 ? void 0 : _a.some((p) => isOnrampProvider.isOnrampProvider(p) && Boolean(p.enabledAt))) !== null && _b !== void 0 ? _b : false;
    const updateSupportsFunding = React.useCallback(({ address, token } = {}) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        var _c;
        if (!fundingEnabled)
            return;
        if (!primaryWallet)
            return;
        const chainName = (_c = walletConnectorCore.getChainInfo(primaryWallet.chain)) === null || _c === void 0 ? void 0 : _c.name;
        if (!chainName)
            return;
        const bitcoinAddress = walletConnectorCore.isBitcoinConnector(primaryWallet.connector) &&
            getWalletAdditionalAddressByType.getWalletAdditionalAddressByType(sdkApi.WalletAddressType.Payment, primaryWallet);
        const chainHasNetwork = network && chainName === 'evm';
        try {
            const [{ url }] = yield api.getOnrampProviders({
                chain: chainName,
                environmentId,
                networkId: chainHasNetwork ? network.toString() : undefined,
                token,
                walletAddress: address || bitcoinAddress || primaryWallet.address,
            });
            if (!url)
                throw new Error('No onramp url found');
            setFundingUrl(url);
            setSupportsFunding(true);
        }
        catch (error) {
            setSupportsFunding(false);
        }
    }), [environmentId, fundingEnabled, network, primaryWallet]);
    const value = React.useMemo(() => ({
        fundingEnabled,
        fundingRef,
        fundingUrl,
        setShowFunding,
        showFunding,
        supportsFunding,
        updateSupportsFunding,
    }), [
        fundingEnabled,
        fundingUrl,
        showFunding,
        supportsFunding,
        updateSupportsFunding,
    ]);
    React.useEffect(() => {
        updateSupportsFunding();
    }, [environmentId, fundingEnabled, network, primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.address]);
    return (jsxRuntime.jsx(FundingContext.Provider, { value: value, children: children }));
};
const useFundingContext = () => {
    const context = React.useContext(FundingContext);
    if (context === undefined) {
        throw new Error('usage of useFundingContext not wrapped in `FundingContextProvider`.');
    }
    return context;
};

exports.FundingContext = FundingContext;
exports.FundingContextProvider = FundingContextProvider;
exports.useFundingContext = useFundingContext;
