import EventEmitter from 'eventemitter3';
import { JwtVerifiedCredential } from '@dynamic-labs/sdk-api/models/JwtVerifiedCredential';
import { Wallet } from '../shared';
/** Maps internal event names to their listeners */
export type DynamicEvents = {
    authFlowOpen: () => void;
    /** Triggered when auth is closed before reaching success (due to user cancel or fail) */
    authFlowClose: () => void;
    /** Triggered when auth is attempted but fails, like when user rejects connection or the network call fails */
    authFlowCancelled: () => void;
    emailVerificationResult: (param: boolean, email: string) => void;
    smsVerificationResult: (param: boolean, phone: {
        phone: string;
        iso2: string;
        dialCode: string;
    }) => void;
    embeddedWalletCreated: (wallet: Wallet, verifiedCredential: JwtVerifiedCredential | undefined) => void;
    embeddedWalletFailed: (error: unknown) => void;
    passkeyRecoveryCompleted: (wallet: Wallet) => void;
    passkeyRecoveryFailed: (error: unknown) => void;
    embeddedWalletRevealCompleted: (wallet: Wallet) => void;
    embeddedWalletRevealFailed: (error: unknown) => void;
    embeddedWalletCreatePasswordCompleted: (password: string) => void;
    embeddedWalletCreatePasswordFailed: (error: unknown) => void;
    embeddedWalletUpdatePasswordCompleted: (password: string) => void;
    embeddedWalletUpdatePasswordFailed: (error: unknown) => void;
    logout: () => void;
    /** Triggered when a new wallet is connected in connect-only mode */
    walletConnected: (wallet: Wallet) => void;
    /** This event is used to trigger logout to be called, DO NOT listen to it. Listen to "logout" instead */
    triggerLogout: () => void;
    farcasterConnectCancelled: () => void;
};
export declare const dynamicEvents: EventEmitter<DynamicEvents, any>;
export type DynamicEventEmitter = typeof dynamicEvents;
