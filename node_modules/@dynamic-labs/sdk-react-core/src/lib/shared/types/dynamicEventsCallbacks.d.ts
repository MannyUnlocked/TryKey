import { JwtVerifiedCredential } from '@dynamic-labs/sdk-api';
import { UserProfile } from './user';
import { Wallet } from './wallets';
export type DynamicEventsCallbacks = {
    onSignedMessage?: (params: {
        messageToSign: string;
        signedMessage: string;
    }) => void;
    /** Called when the auth modal is closed before reaching success (due to user cancel or fail) */
    onAuthFlowCancel?: () => void;
    /** Called whenever the auth modal is closed */
    onAuthFlowClose?: () => void;
    onAuthFlowOpen?: () => void;
    onAuthSuccess?: OnAuthSuccess;
    onConnect?: onConnect;
    onDisconnect?: OnDisconnect;
    onEmailVerificationSuccess?: OnEmailVerificationSuccess;
    onEmailVerificationFailure?: OnEmailVerificationFailure;
    onBeforeConnectSuccessConfirmation?: OnBeforeConnectSuccessConfirmation;
    onLinkSuccess?: OnLinkSuccess;
    onLogout?: (user: UserProfile | undefined) => void;
    onUnlinkSuccess?: (unlinkedWallet: JwtVerifiedCredential) => void;
    onUserProfileUpdate?: (user: UserProfile) => void;
    onEmbeddedWalletCreated?: OnEmbeddedWalletCreated;
};
export type OnAuthSuccess = (params: {
    authToken: string;
    handleLogOut: () => Promise<void>;
    isAuthenticated: boolean;
    primaryWallet: Wallet | null;
    user: UserProfile;
}) => void;
export type OnLinkSuccess = (params: {
    authToken: string;
    user: UserProfile;
    wallet: Wallet | undefined;
}) => void;
export type onConnect = (params: {
    wallet: Wallet | undefined;
}) => void;
export type OnDisconnect = (params: {
    wallet: Wallet | undefined;
}) => void;
export type OnEmailVerificationSuccess = (email: string) => void;
export type OnEmailVerificationFailure = (email: string) => void;
export type OnBeforeConnectSuccessConfirmation = (wallet: Partial<Wallet>) => Promise<boolean>;
export type OnUserProfileUpdate = (user: UserProfile) => void;
export type OnEmbeddedWalletCreated = (verifiedCredential: JwtVerifiedCredential | undefined) => void;
