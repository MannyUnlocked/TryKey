import { EvmRpcProvider } from '@dynamic-labs/rpc-provider-ethereum';
import { SolanaRpcProvider } from '@dynamic-labs/rpc-provider-solana';
import { OauthProviderRequest, PasswordSourceTypeEnum, WalletAdditionalAddress, WalletProviderEnum } from '@dynamic-labs/sdk-api';
import type { WalletConnector } from '@dynamic-labs/wallet-connector-core';
export type Wallet = {
    address: string;
    chain: string;
    /**
     * If we are currently able to fetch information about this wallet from its provider.
     * Will be false, for example, if you are connected through a browser extension and you lock it.
     */
    connected: boolean;
    connector: WalletConnector;
    id: string;
    network?: string | number;
    /**
     * If there is a current user, this will be true if and only if the user has signed this wallet
     * to link it to their account
     */
    authenticated: boolean;
    /**
     * Additional addresses associated to the wallet
     * like ordinals and payment addresses for bitcoin wallets
     */
    additionalAddresses?: WalletAdditionalAddress[];
};
export type WalletAction = 'select' | 'unlink';
export type WalletWithAction = {
    action: WalletAction;
    wallet: Wallet;
};
/** Defines the options that show in our log in wallet lists */
export interface WalletOption {
    isInstalledOnBrowser: boolean;
    key: string;
    name: string;
    walletConnector: WalletConnector;
    group?: string;
    chainGroup?: string;
    walletGroup?: string;
    groupedWallets?: WalletOption[];
    injectedConfig?: Array<Record<string, unknown>>;
}
export type WalletGroupOption = WalletOption & {
    groupedWallets: WalletOption[];
};
export type WalletProvider = `${WalletProviderEnum}`;
export interface VerifyWallet {
    captchaToken?: string;
    chain: string | undefined;
    messageToSign: string;
    network: string | number | undefined;
    oauth?: OauthProviderRequest;
    publicWalletAddress: string;
    signedMessage: string;
    skipEmptyAccountCheck?: boolean;
    walletName: string;
    walletProvider: WalletProvider;
    additionalWalletAddresses?: WalletAdditionalAddress[];
    backup?: string;
    password?: string;
    passwordSource?: PasswordSourceTypeEnum;
}
export type RecommendedWallet = {
    walletKey: string;
    label?: string;
};
export type ChainToWalletMap = {
    primary_chain: string;
    wallets: {
        algorand?: string;
        bitcoin?: string;
        cosmos?: string;
        evm?: string;
        flow?: string;
        solana?: string;
    };
};
export type DynamicRPCProviders = {
    evmDefaultProvider: EvmRpcProvider | undefined;
    evmProviders: EvmRpcProvider[] | undefined;
    getEvmRpcProviderByChainId: (chainId: number) => EvmRpcProvider | undefined;
    solanaDefaultProvider: SolanaRpcProvider | undefined;
    solanaProviders: SolanaRpcProvider[] | undefined;
};
