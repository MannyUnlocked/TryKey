'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var api = require('../../../data/api.cjs');
require('@dynamic-labs/wallet-connector-core');
require('@dynamic-labs/sdk-api');
require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('react/jsx-runtime');
require('../../../context/ViewContext/ViewContext.cjs');
require('react');
require('@dynamic-labs/wallet-book');
require('../../constants/colors.cjs');
require('../../constants/values.cjs');
require('../../../shared/utils/classes/storage/localStorage.cjs');
require('@dynamic-labs/utils');
require('../../../shared/consts/index.cjs');
require('@dynamic-labs/multi-wallet');
var getAuthToken = require('../getAuthToken/getAuthToken.cjs');
require('react-international-phone');
require('viem');
require('viem/chains');
var updateJWTAndCreateUserProfile = require('../updateJWTAndCreateUserProfile/updateJWTAndCreateUserProfile.cjs');

/**
 * A helper function that wraps the unlinkWallet function from the API.
 * This function will store the updated JWT in local storage and return the decoded JWT.
 *
 * @throws Error if the authentication call returns no or invalid JWT
 */
const handleUnlinkHelper = ({ environmentId, primaryWalletId, walletId, }) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
    const token = getAuthToken.getAuthToken();
    if (!token)
        return;
    const jwt = yield api.unlinkWallet({ environmentId, primaryWalletId, walletId }, token);
    return updateJWTAndCreateUserProfile.updateJWTAndCreateUserProfile(jwt);
});

exports.handleUnlinkHelper = handleUnlinkHelper;
