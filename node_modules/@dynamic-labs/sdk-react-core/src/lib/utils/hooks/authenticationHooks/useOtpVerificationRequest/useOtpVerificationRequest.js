import { __awaiter } from '../../../../../../_virtual/_tslib.js';
import { useCallback, useRef } from 'react';
import '../../../../events/dynamicEvents.js';
import '@dynamic-labs/utils';
import '../../../../context/DynamicContext/DynamicContext.js';
import { decodeJwt } from '../../../../shared/utils/functions/decodeJwt/decodeJwt.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../../../context/ViewContext/ViewContext.js';
import '../../../../shared/logger.js';
import '@dynamic-labs/wallet-book';
import '../../../constants/colors.js';
import '../../../constants/values.js';
import '../../../../shared/utils/classes/storage/localStorage.js';
import '@dynamic-labs/sdk-api';
import '../../../../shared/consts/index.js';
import { useInternalDynamicContext } from '../../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.js';
import '../../../../context/CaptchaContext/CaptchaContext.js';
import '../../../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import 'viem';
import 'viem/chains';
import { verifyEmail, verifySms } from '../../../../data/api.js';
import '../../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../../context/AccountExistsContext/AccountExistsContext.js';
import { useVerification } from '../../../../context/VerificationContext/VerificationContext.js';
import { useUpdateUserProfileByJWTCallback } from '../../useUpdateUserProfileByJWTCallback/useUpdateUserProfileByJWTCallback.js';
import 'react-dom';
import '../../../../context/WalletContext/WalletContext.js';
import '../../../../context/ThemeContext/ThemeContext.js';
import { useHandleVerificationRequired, isVerificationRequired } from '../../useHandleVerificationRequired/useHandleVerificationRequired.js';
import '@dynamic-labs/types';
import 'yup';
import 'react-i18next';
import '../../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../../context/MockContext/MockContext.js';
import '../../useUserUpdateRequest/useUpdateUser/useUpdateUser.js';
import '../../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../../components/Alert/Alert.js';
import '../../../../components/ShadowDOM/ShadowDOM.js';
import '../../../../components/IconButton/IconButton.js';
import '../../../../components/InlineWidget/InlineWidget.js';
import '../../../../components/Input/Input.js';
import '../../../../components/IsBrowser/IsBrowser.js';
import '../../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../../components/PhoneNumberField/usePhoneInputLogic/usePhoneInputLogic.js';
import '../../../../components/Popper/Popper/Popper.js';
import '../../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../../../../views/WalletList/WalletList.js';
import '../../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import 'i18next';
import '@hcaptcha/react-hcaptcha';
import '../../../../context/LoadingContext/LoadingContext.js';
import '../../../../config/ApiEndpoint.js';
import '../../../../context/FooterAnimationContext/index.js';
import '../../../../locale/locale.js';
import '../../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../../context/PasskeyContext/PasskeyContext.js';
import '../../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';

// Hook exposed to the public as a scoped function in useUserUpdateRequest result
const useOtpVerificationRequest = () => {
    const { onboardingOnlyJwt, authToken, environmentId } = useInternalDynamicContext();
    const jwtToken = onboardingOnlyJwt || authToken;
    const { updateUserProfileByJWT } = useUpdateUserProfileByJWTCallback();
    const { verificationUUID: contextVerificationUUID } = useVerification();
    const verifyOtp = useCallback((verificationToken, destination, verificationUUID) => __awaiter(void 0, void 0, void 0, function* () {
        var _a;
        if (!jwtToken)
            throw new Error('No JWT token provided');
        // VerificationUUID is saved in the context in case the view changes
        // after a profile update (changing the view from edit profile to verify email)
        if (!verificationUUID && !contextVerificationUUID)
            throw new Error('No verification UUID provided');
        const verify = destination === 'email' ? verifyEmail : verifySms;
        const updateSelfResponse = yield verify({
            environmentId,
            verificationToken,
            verificationUUID: String(verificationUUID !== null && verificationUUID !== void 0 ? verificationUUID : contextVerificationUUID),
        }, jwtToken);
        // check if decoded JWT still somehow has missing fields, we can't proceed if it does
        const decodedJwt = decodeJwt(updateSelfResponse.jwt);
        const missingFields = (_a = decodedJwt === null || decodedJwt === void 0 ? void 0 : decodedJwt.missingFields) !== null && _a !== void 0 ? _a : [];
        const requiredVerificationDestination = isVerificationRequired(updateSelfResponse);
        if (requiredVerificationDestination && handleVerificationRequired.current)
            return handleVerificationRequired.current({
                destination: requiredVerificationDestination,
                missingFields,
                updateUserProfileResponse: updateSelfResponse,
            });
        // If verification is not needed then we can update the user profile immediately.
        yield updateUserProfileByJWT(updateSelfResponse.jwt);
        return {
            isEmailVerificationRequired: false,
            isSmsVerificationRequired: false,
            missingFields,
            updateUserProfileResponse: updateSelfResponse,
        };
    }), [contextVerificationUUID, environmentId, jwtToken, updateUserProfileByJWT]);
    // This is necessary to avoid a circular declaration issue
    const handleVerificationRequired = useRef(undefined);
    handleVerificationRequired.current = useHandleVerificationRequired(verifyOtp);
    return { verifyOtp };
};

export { useOtpVerificationRequest };
