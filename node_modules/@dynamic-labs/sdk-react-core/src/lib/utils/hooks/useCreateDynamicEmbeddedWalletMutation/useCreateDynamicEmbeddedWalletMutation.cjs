'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var React = require('react');
var sdkApi = require('@dynamic-labs/sdk-api');
require('../../../context/DynamicContext/DynamicContext.cjs');
var logger = require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
require('../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../constants/colors.cjs');
require('../../constants/values.cjs');
require('../../../shared/utils/classes/storage/localStorage.cjs');
require('@dynamic-labs/utils');
require('../../../shared/consts/index.cjs');
var dynamicEvents = require('../../../events/dynamicEvents.cjs');
require('../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../context/ErrorContext/ErrorContext.cjs');
var createUserProfile = require('../../functions/createUserProfile/createUserProfile.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('viem');
require('viem/chains');
require('../../../config/ApiEndpoint.cjs');
var updateJWTAndCreateUserProfile = require('../../functions/updateJWTAndCreateUserProfile/updateJWTAndCreateUserProfile.cjs');
require('../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
var createEmbeddedWalletWithPasskey = require('../../../views/Passkey/utils/createEmbeddedWalletWithPasskey/createEmbeddedWalletWithPasskey.cjs');
var findPasskeyEmailWalletConnector = require('../../../views/Passkey/utils/findPasskeyEmailWalletConnector/findPasskeyEmailWalletConnector.cjs');
var createPregeneratedWallet = require('../../../views/Passkey/utils/createPregeneratedWallet/createPregeneratedWallet.cjs');
var smartWallet = require('../useWalletConnectors/utils/smartWallet/smartWallet.cjs');
require('../../../context/WalletContext/WalletContext.cjs');
require('../../../context/ThemeContext/ThemeContext.cjs');
require('@dynamic-labs/types');
require('yup');
require('react-i18next');
require('../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../../context/MockContext/MockContext.cjs');
require('../useUserUpdateRequest/useUpdateUser/useUpdateUser.cjs');
require('../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../components/Alert/Alert.cjs');
require('../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../components/IconButton/IconButton.cjs');
require('../../../components/InlineWidget/InlineWidget.cjs');
require('../../../components/Input/Input.cjs');
require('../../../components/IsBrowser/IsBrowser.cjs');
require('../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../components/PhoneNumberField/usePhoneInputLogic/usePhoneInputLogic.cjs');
require('../../../components/Popper/Popper/Popper.cjs');
require('../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../../../views/WalletList/WalletList.cjs');
require('../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('i18next');
require('@hcaptcha/react-hcaptcha');
require('../../../context/LoadingContext/LoadingContext.cjs');
require('../../../context/FooterAnimationContext/index.cjs');
require('../../../locale/locale.cjs');
require('../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
var useInternalDynamicContext = require('../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');

// This hook needs to be async that's why it's not using useMutation
const useCreateDynamicEmbeddedWalletMutation = () => {
    var _a, _b, _c;
    const { setPrimaryWalletId, setCallback, setUser, user, setShowAuthFlow, projectSettings, } = useInternalDynamicContext.useInternalDynamicContext();
    const [isLoading, setIsLoading] = React.useState(false);
    const [error, setError] = React.useState();
    const embeddedChainConfig = ((_b = (_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _a === void 0 ? void 0 : _a.embeddedWallets) === null || _b === void 0 ? void 0 : _b.chainConfigurations) || [];
    const primaryEmbeddedChain = ((_c = embeddedChainConfig.find((chain) => chain.primary)) === null || _c === void 0 ? void 0 : _c.name) === 'SOL'
        ? sdkApi.ChainEnum.Sol
        : sdkApi.ChainEnum.Evm;
    const embeddedChains = embeddedChainConfig
        .filter((chain) => chain.enabled)
        .map((c) => (c.name === 'SOL' ? sdkApi.ChainEnum.Sol : sdkApi.ChainEnum.Evm));
    const createDynamicEmbeddedWalletMutation = React.useCallback(({ authToken, decodedJwt, environmentId, walletConnectorOptions, withAuthenticator, }) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        var _d, _e;
        setIsLoading(true);
        const createEmbeddedWalletMethodToUse = withAuthenticator
            ? createEmbeddedWalletWithPasskey.createEmbeddedWalletWithPasskey
            : createPregeneratedWallet.createPregeneratedWallet;
        try {
            const { embeddedWalletVerifiedCredential, jwt, decodedJwt: updatedDecodedJwt, walletConnector, } = yield createEmbeddedWalletMethodToUse({
                authToken,
                chains: embeddedChains,
                environmentId,
                user: user !== null && user !== void 0 ? user : createUserProfile.createUserProfile(decodedJwt),
                walletConnector: findPasskeyEmailWalletConnector.findPasskeyEmailWalletConnector(walletConnectorOptions, primaryEmbeddedChain),
            });
            const turnkeyVerifiedCredentials = (_d = updatedDecodedJwt === null || updatedDecodedJwt === void 0 ? void 0 : updatedDecodedJwt.verifiedCredentials) === null || _d === void 0 ? void 0 : _d.find(({ walletName }) => walletName === null || walletName === void 0 ? void 0 : walletName.startsWith('turnkey'));
            /** It's not authenticated if it's a turnkey wallet that still hasn't created a passkey */
            const authenticated = Boolean((_e = turnkeyVerifiedCredentials === null || turnkeyVerifiedCredentials === void 0 ? void 0 : turnkeyVerifiedCredentials.walletProperties) === null || _e === void 0 ? void 0 : _e.isAuthenticatorAttached);
            const passkeyWallet = {
                address: (yield walletConnector.getAddress()) || '',
                authenticated,
                chain: walletConnector.connectedChain || '',
                connected: true,
                connector: walletConnector,
                id: embeddedWalletVerifiedCredential.id,
            };
            const smartWallet$1 = smartWallet.findSmartWallet(embeddedWalletVerifiedCredential, updatedDecodedJwt.verifiedCredentials);
            if (smartWallet$1) {
                yield smartWallet.initializeSmartWallet({
                    account: smartWallet$1,
                    verifiedCredentials: updatedDecodedJwt.verifiedCredentials,
                    walletConnectorOptions,
                });
                setPrimaryWalletId(smartWallet$1.id);
            }
            else {
                setPrimaryWalletId(embeddedWalletVerifiedCredential.id);
            }
            setUser(updateJWTAndCreateUserProfile.updateJWTAndCreateUserProfile(jwt));
            setShowAuthFlow(false, { performMultiWalletChecks: false });
            dynamicEvents.dynamicEvents.emit('embeddedWalletCreated', passkeyWallet, turnkeyVerifiedCredentials);
        }
        catch (err) {
            setError(err);
            logger.logger.error('Failed to create embedded wallet', err);
            dynamicEvents.dynamicEvents.emit('embeddedWalletFailed', err);
        }
        finally {
            setIsLoading(false);
        }
    }), [setCallback, setPrimaryWalletId, setShowAuthFlow, setUser, user]);
    return {
        createDynamicEmbeddedWalletMutation,
        error,
        isLoading,
    };
};

exports.useCreateDynamicEmbeddedWalletMutation = useCreateDynamicEmbeddedWalletMutation;
