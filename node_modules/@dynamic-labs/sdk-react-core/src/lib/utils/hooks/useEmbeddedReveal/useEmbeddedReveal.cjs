'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var React = require('react');
var walletConnectorCore = require('@dynamic-labs/wallet-connector-core');
require('../../../context/DynamicContext/DynamicContext.cjs');
var decodeJwt = require('../../../shared/utils/functions/decodeJwt/decodeJwt.cjs');
require('@dynamic-labs/iconic');
require('react/jsx-runtime');
var ViewContext = require('../../../context/ViewContext/ViewContext.cjs');
require('../../../shared/logger.cjs');
require('@dynamic-labs/wallet-book');
require('../../constants/colors.cjs');
require('../../constants/values.cjs');
require('../../../shared/utils/classes/storage/localStorage.cjs');
require('@dynamic-labs/sdk-api');
require('@dynamic-labs/utils');
require('../../../shared/consts/index.cjs');
var dynamicEvents = require('../../../events/dynamicEvents.cjs');
require('../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
var getAuthToken = require('../../functions/getAuthToken/getAuthToken.cjs');
require('react-international-phone');
var isTurnkeyEnabled = require('../../functions/isTurnkeyEnabled/isTurnkeyEnabled.cjs');
require('viem');
require('viem/chains');
var isCoinbaseWaasEnabled = require('../../functions/isCoinbaseWaasEnabled/isCoinbaseWaasEnabled.cjs');
require('../../../config/ApiEndpoint.cjs');
require('../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
var useEmbeddedWallet = require('../useEmbeddedWallet/useEmbeddedWallet.cjs');
require('../../../context/ThemeContext/ThemeContext.cjs');
var useIsTurnkeyWallet = require('../useIsTurnkeyWallet/useIsTurnkeyWallet.cjs');
require('@dynamic-labs/types');
require('yup');
require('react-i18next');
require('../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../../context/MockContext/MockContext.cjs');
require('../useUserUpdateRequest/useUpdateUser/useUpdateUser.cjs');
require('../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../components/Alert/Alert.cjs');
require('../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../components/IconButton/IconButton.cjs');
require('../../../components/InlineWidget/InlineWidget.cjs');
require('../../../components/Input/Input.cjs');
require('../../../components/IsBrowser/IsBrowser.cjs');
require('../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../components/PhoneNumberField/usePhoneInputLogic/usePhoneInputLogic.cjs');
require('../../../components/Popper/Popper/Popper.cjs');
require('../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('../../../context/WalletContext/WalletContext.cjs');
require('formik');
require('../../../views/WalletList/WalletList.cjs');
require('../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('i18next');
require('@hcaptcha/react-hcaptcha');
require('../../../context/LoadingContext/LoadingContext.cjs');
require('../../../context/FooterAnimationContext/index.cjs');
require('../../../locale/locale.cjs');
require('../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
var useInternalDynamicContext = require('../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');

// Hook exposed to customers and used internally to trigger embedded reveal
const useEmbeddedReveal = () => {
    const { primaryWallet, projectSettings, setShowAuthFlow } = useInternalDynamicContext.useInternalDynamicContext();
    const { userHasEmbeddedWallet } = useEmbeddedWallet.useEmbeddedWallet();
    const { setView } = ViewContext.useViewContext();
    const { isTurnkeyWallet } = useIsTurnkeyWallet.useIsTurnkeyWallet();
    const turnkeyChecks = ({ jwt, recoveryPhrase, }) => {
        var _a, _b;
        if (!isTurnkeyEnabled.isTurnkeyEnabled(projectSettings)) {
            throw new Error('Passkey embedded wallet is not enabled. Go to the dashboard and make sure to have both Turnkey/Passkey Embedded wallets and at least one EVM network enabled. Also, check if EthereumWalletConnectors is in the  DynamicContextProvider > settings > walletConnectors.');
        }
        if (!userHasEmbeddedWallet()) {
            throw new Error('Passkey embedded wallet not found');
        }
        const decodedJwt = decodeJwt.decodeJwt(jwt);
        const walletProperties = (_b = (_a = decodedJwt === null || decodedJwt === void 0 ? void 0 : decodedJwt.verifiedCredentials) === null || _a === void 0 ? void 0 : _a.find(({ walletName }) => walletName === null || walletName === void 0 ? void 0 : walletName.startsWith('turnkey'))) === null || _b === void 0 ? void 0 : _b.walletProperties;
        const turnkeyHDWalletId = walletProperties === null || walletProperties === void 0 ? void 0 : walletProperties.turnkeyHDWalletId;
        if (recoveryPhrase && !turnkeyHDWalletId) {
            throw new Error('Wallet is non-HD and does not have a recovery phrase');
        }
    };
    const coinbaseMpcChecks = ({ jwt }) => {
        if (!isCoinbaseWaasEnabled.isCoinbaseWaasEnabled(projectSettings)) {
            throw new Error('Coinbase MPC is not enabled. Go to the dashboard and make sure to have Coinbase WaaS and at least one EVM network enabled. Also, make sure you are passing `EthereumWalletConnectors` to the `walletConnectors` prop in `DynamicContextProvider` `settings`.');
        }
        if (!userHasEmbeddedWallet()) {
            throw new Error('Coinbase MPC wallet not found');
        }
    };
    const initExportProcess = React.useCallback((recoveryPhrase = false) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        if (!primaryWallet) {
            throw new Error('No primary wallet');
        }
        const jwt = getAuthToken.getAuthToken();
        if (!jwt) {
            throw new Error('User is not logged in');
        }
        if (isTurnkeyWallet) {
            turnkeyChecks({ jwt, recoveryPhrase });
        }
        if (walletConnectorCore.isCoinbaseMpcWalletConnector(primaryWallet.connector)) {
            coinbaseMpcChecks({ jwt });
        }
        if (!userHasEmbeddedWallet()) {
            throw new Error('Passkey embedded wallet not found');
        }
        setShowAuthFlow(true, {
            ignoreIfIsEmbeddedWidget: false,
            performMultiWalletChecks: false,
        });
        setView('embedded-reveal-view', { exportPrivateKey: !recoveryPhrase });
        return new Promise((resolve, reject) => {
            dynamicEvents.dynamicEvents.once('embeddedWalletRevealCompleted', (wallet) => resolve(wallet));
            dynamicEvents.dynamicEvents.once('embeddedWalletRevealFailed', (error) => reject(error));
        });
    }), [primaryWallet, isTurnkeyWallet, setShowAuthFlow, setView]);
    return {
        initExportProcess,
    };
};

exports.useEmbeddedReveal = useEmbeddedReveal;
