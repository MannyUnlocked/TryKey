'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../../_virtual/_tslib.cjs');
var React = require('react');
var sdkApi = require('@dynamic-labs/sdk-api');
var walletConnectorCore = require('@dynamic-labs/wallet-connector-core');
var utils = require('@dynamic-labs/utils');
var findEmbeddedWalletFromVerifiedCredentials = require('../../../functions/findEmbeddedWalletFromVerifiedCredentials/findEmbeddedWalletFromVerifiedCredentials.cjs');
require('../../../constants/values.cjs');
require('@dynamic-labs/multi-wallet');
var logger = require('../../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('react/jsx-runtime');
require('../../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../../constants/colors.cjs');
require('../../../../shared/utils/classes/storage/localStorage.cjs');
var generateRandomPassword = require('../../../../shared/utils/functions/generateRandomPassword/generateRandomPassword.cjs');
require('../../../../shared/consts/index.cjs');
require('react-international-phone');
var getVerifyArgs = require('../../../functions/getVerifyArgs/getVerifyArgs.cjs');
require('viem');
require('viem/chains');
var findCoinbaseMPCWallet = require('../../../functions/findCoinbaseMPCWallet/findCoinbaseMPCWallet.cjs');
var getCoinbaseMPCConnectorFetchers = require('../../../functions/getCoinbaseMPCConnectorFetchers/getCoinbaseMPCConnectorFetchers.cjs');
var updateJWTAndCreateUserProfile = require('../../../functions/updateJWTAndCreateUserProfile/updateJWTAndCreateUserProfile.cjs');
require('../../../../context/DynamicContext/DynamicContext.cjs');
var dynamicEvents = require('../../../../events/dynamicEvents.cjs');
require('../../../../context/CaptchaContext/CaptchaContext.cjs');
var ErrorContext = require('../../../../context/ErrorContext/ErrorContext.cjs');
require('../../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../../context/AccountExistsContext/AccountExistsContext.cjs');
var api = require('../../../../data/api.cjs');
var getSiweStatement = require('../../../functions/getSiweStatement/getSiweStatement.cjs');
require('../../../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../../../context/WalletContext/WalletContext.cjs');
require('../../../../context/ThemeContext/ThemeContext.cjs');
require('@dynamic-labs/types');
require('yup');
require('react-i18next');
require('../../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../../../context/MockContext/MockContext.cjs');
require('../../useUserUpdateRequest/useUpdateUser/useUpdateUser.cjs');
require('../../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../../components/Alert/Alert.cjs');
require('../../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../../components/IconButton/IconButton.cjs');
require('../../../../components/InlineWidget/InlineWidget.cjs');
require('../../../../components/Input/Input.cjs');
require('../../../../components/IsBrowser/IsBrowser.cjs');
require('../../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../../components/PhoneNumberField/usePhoneInputLogic/usePhoneInputLogic.cjs');
require('../../../../components/Popper/Popper/Popper.cjs');
require('../../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../../../../views/WalletList/WalletList.cjs');
require('../../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('i18next');
require('@hcaptcha/react-hcaptcha');
require('../../../../context/LoadingContext/LoadingContext.cjs');
require('../../../../config/ApiEndpoint.cjs');
require('../../../../context/FooterAnimationContext/index.cjs');
require('../../../../locale/locale.cjs');
require('../../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
var useInternalDynamicContext = require('../../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');

const DYNAMIC_PASSWORD_LENGTH = 20;
const useCoinbaseMPC = () => {
    const { setPrimaryWalletId, walletConnectorOptions, environmentId, consumeNonce, displaySiweStatement, appName, siweStatement, setUser, handleLogOut, setShowAuthFlow, } = useInternalDynamicContext.useInternalDynamicContext();
    const { setError } = ErrorContext.useErrorContext();
    const returnExistingCoinbaseMPCWallet = React.useCallback((connector, decodedJwt, embeddedWalletVerifiedCredential) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        connector.setVerifiedCredentials(decodedJwt.verifiedCredentials);
        setPrimaryWalletId(embeddedWalletVerifiedCredential.id);
        const coinbaseMPCWallet = {
            address: (yield (connector === null || connector === void 0 ? void 0 : connector.getAddress())) || '',
            authenticated: true,
            chain: (connector === null || connector === void 0 ? void 0 : connector.connectedChain) || '',
            connected: true,
            connector,
            id: embeddedWalletVerifiedCredential.id,
        };
        return coinbaseMPCWallet;
    }), [setPrimaryWalletId]);
    const linkCoinbaseMPCWallet = React.useCallback(({ connector, backupCode, password, source, jwt, }) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        const nonce = consumeNonce();
        if (nonce === undefined)
            throw new utils.DynamicError('Missing nonce');
        const address = yield connector.getAddress();
        if (!address)
            throw new utils.DynamicError('Missing address');
        const verifyArgs = yield getVerifyArgs.getVerifyArgs({
            displaySiweStatement,
            environmentId,
            nonce,
            publicWalletAddress: address,
            siweStatement: getSiweStatement.getSiweStatement({ appName, siweStatement }),
            walletConnector: connector,
            walletProvider: 'embeddedWallet',
        });
        const passcodeArgs = source === sdkApi.PasswordSourceTypeEnum.Dynamic
            ? { password, passwordSource: source }
            : {};
        const updatedJwt = yield api.linkWallet(environmentId, Object.assign(Object.assign(Object.assign({}, passcodeArgs), verifyArgs), { backup: backupCode }), jwt);
        const user = updateJWTAndCreateUserProfile.updateJWTAndCreateUserProfile(updatedJwt);
        const newSelectedCredentialWallet = user.verifiedCredentials.find((cred) => cred.id === user.lastVerifiedCredentialId &&
            cred.format === 'blockchain');
        if (!newSelectedCredentialWallet) {
            throw new utils.DynamicError('No primary wallet found');
        }
        setPrimaryWalletId(newSelectedCredentialWallet.id);
        setUser(user);
        connector.setVerifiedCredentials(user.verifiedCredentials);
        return newSelectedCredentialWallet;
    }), [
        appName,
        consumeNonce,
        displaySiweStatement,
        environmentId,
        setPrimaryWalletId,
        setUser,
        siweStatement,
    ]);
    const createNewCoinbaseMPCWallet = React.useCallback((connector, jwt, password) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        const initialWalletPassword = password
            ? password
            : generateRandomPassword.generateRandomPassword(DYNAMIC_PASSWORD_LENGTH);
        const source = password
            ? sdkApi.PasswordSourceTypeEnum.User
            : sdkApi.PasswordSourceTypeEnum.Dynamic;
        try {
            const backupCode = yield connector.generateWallet(source, initialWalletPassword);
            const jwtVerifiedCredential = yield linkCoinbaseMPCWallet({
                backupCode,
                connector,
                jwt,
                password: initialWalletPassword,
                source,
            });
            const coinbaseMPCWallet = {
                address: (yield (connector === null || connector === void 0 ? void 0 : connector.getAddress())) || '',
                authenticated: true,
                chain: (connector === null || connector === void 0 ? void 0 : connector.connectedChain) || '',
                connected: true,
                connector,
                id: jwtVerifiedCredential.id,
            };
            dynamicEvents.dynamicEvents.emit('embeddedWalletCreated', coinbaseMPCWallet, jwtVerifiedCredential);
            return coinbaseMPCWallet;
        }
        catch (error) {
            logger.logger.error(error);
            if (error instanceof utils.DynamicError &&
                error.code === 'create_embedded_wallet_error') {
                yield handleLogOut();
                setError(error.message);
            }
        }
        return undefined;
    }), [linkCoinbaseMPCWallet, handleLogOut, setError]);
    const createCoinbaseMPCWallet = React.useCallback((jwt, decodedJwt, chain = sdkApi.ChainEnum.Evm, password) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        var _a;
        const connector = (_a = findCoinbaseMPCWallet.findCoinbaseMPCWallet(walletConnectorOptions)) === null || _a === void 0 ? void 0 : _a.walletConnector;
        if (!connector || !walletConnectorCore.isCoinbaseMpcWalletConnector(connector)) {
            const error = new utils.DynamicError('CoinbaseWaaSWalletConnectors not found');
            logger.logger.error('Failed to create embedded wallet', error);
            dynamicEvents.dynamicEvents.emit('embeddedWalletFailed', error);
            setError(error.message);
            throw error;
        }
        setShowAuthFlow(false);
        const { fetchAuthToken } = getCoinbaseMPCConnectorFetchers.getCoinbaseMPCConnectorFetchers({
            authToken: jwt,
            environmentId,
        });
        if (fetchAuthToken) {
            connector.setAuthTokenFetcher(fetchAuthToken);
        }
        const embeddedWalletVerifiedCredential = findEmbeddedWalletFromVerifiedCredentials.findEmbeddedWalletFromVerifiedCredentials(jwt, chain);
        // if user already has embedded wallet, set it as primary wallet and return
        if (embeddedWalletVerifiedCredential) {
            return returnExistingCoinbaseMPCWallet(connector, decodedJwt, embeddedWalletVerifiedCredential);
        }
        return createNewCoinbaseMPCWallet(connector, jwt, password);
    }), [
        walletConnectorOptions,
        setShowAuthFlow,
        environmentId,
        createNewCoinbaseMPCWallet,
        setError,
        returnExistingCoinbaseMPCWallet,
    ]);
    return {
        createCoinbaseMPCWallet,
    };
};

exports.useCoinbaseMPC = useCoinbaseMPC;
