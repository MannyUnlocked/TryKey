import { __awaiter } from '../../../../../../_virtual/_tslib.js';
import { useCallback } from 'react';
import { PasswordSourceTypeEnum, ChainEnum } from '@dynamic-labs/sdk-api';
import { isCoinbaseMpcWalletConnector } from '@dynamic-labs/wallet-connector-core';
import { DynamicError } from '@dynamic-labs/utils';
import { findEmbeddedWalletFromVerifiedCredentials } from '../../../functions/findEmbeddedWalletFromVerifiedCredentials/findEmbeddedWalletFromVerifiedCredentials.js';
import '../../../constants/values.js';
import '@dynamic-labs/multi-wallet';
import { logger } from '../../../../shared/logger.js';
import '@dynamic-labs/iconic';
import 'react/jsx-runtime';
import '../../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '../../../constants/colors.js';
import '../../../../shared/utils/classes/storage/localStorage.js';
import { generateRandomPassword } from '../../../../shared/utils/functions/generateRandomPassword/generateRandomPassword.js';
import '../../../../shared/consts/index.js';
import 'react-international-phone';
import { getVerifyArgs } from '../../../functions/getVerifyArgs/getVerifyArgs.js';
import 'viem';
import 'viem/chains';
import { findCoinbaseMPCWallet } from '../../../functions/findCoinbaseMPCWallet/findCoinbaseMPCWallet.js';
import { getCoinbaseMPCConnectorFetchers } from '../../../functions/getCoinbaseMPCConnectorFetchers/getCoinbaseMPCConnectorFetchers.js';
import { updateJWTAndCreateUserProfile } from '../../../functions/updateJWTAndCreateUserProfile/updateJWTAndCreateUserProfile.js';
import '../../../../context/DynamicContext/DynamicContext.js';
import { dynamicEvents } from '../../../../events/dynamicEvents.js';
import '../../../../context/CaptchaContext/CaptchaContext.js';
import { useErrorContext } from '../../../../context/ErrorContext/ErrorContext.js';
import '../../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../../context/AccountExistsContext/AccountExistsContext.js';
import { linkWallet } from '../../../../data/api.js';
import { getSiweStatement } from '../../../functions/getSiweStatement/getSiweStatement.js';
import '../../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../../../context/WalletContext/WalletContext.js';
import '../../../../context/ThemeContext/ThemeContext.js';
import '@dynamic-labs/types';
import 'yup';
import 'react-i18next';
import '../../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../../context/MockContext/MockContext.js';
import '../../useUserUpdateRequest/useUpdateUser/useUpdateUser.js';
import '../../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../../components/Alert/Alert.js';
import '../../../../components/ShadowDOM/ShadowDOM.js';
import '../../../../components/IconButton/IconButton.js';
import '../../../../components/InlineWidget/InlineWidget.js';
import '../../../../components/Input/Input.js';
import '../../../../components/IsBrowser/IsBrowser.js';
import '../../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../../components/PhoneNumberField/usePhoneInputLogic/usePhoneInputLogic.js';
import '../../../../components/Popper/Popper/Popper.js';
import '../../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../../../../views/WalletList/WalletList.js';
import '../../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import 'i18next';
import '@hcaptcha/react-hcaptcha';
import '../../../../context/LoadingContext/LoadingContext.js';
import '../../../../config/ApiEndpoint.js';
import '../../../../context/FooterAnimationContext/index.js';
import '../../../../locale/locale.js';
import '../../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../../context/PasskeyContext/PasskeyContext.js';
import '../../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import { useInternalDynamicContext } from '../../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.js';

const DYNAMIC_PASSWORD_LENGTH = 20;
const useCoinbaseMPC = () => {
    const { setPrimaryWalletId, walletConnectorOptions, environmentId, consumeNonce, displaySiweStatement, appName, siweStatement, setUser, handleLogOut, setShowAuthFlow, } = useInternalDynamicContext();
    const { setError } = useErrorContext();
    const returnExistingCoinbaseMPCWallet = useCallback((connector, decodedJwt, embeddedWalletVerifiedCredential) => __awaiter(void 0, void 0, void 0, function* () {
        connector.setVerifiedCredentials(decodedJwt.verifiedCredentials);
        setPrimaryWalletId(embeddedWalletVerifiedCredential.id);
        const coinbaseMPCWallet = {
            address: (yield (connector === null || connector === void 0 ? void 0 : connector.getAddress())) || '',
            authenticated: true,
            chain: (connector === null || connector === void 0 ? void 0 : connector.connectedChain) || '',
            connected: true,
            connector,
            id: embeddedWalletVerifiedCredential.id,
        };
        return coinbaseMPCWallet;
    }), [setPrimaryWalletId]);
    const linkCoinbaseMPCWallet = useCallback(({ connector, backupCode, password, source, jwt, }) => __awaiter(void 0, void 0, void 0, function* () {
        const nonce = consumeNonce();
        if (nonce === undefined)
            throw new DynamicError('Missing nonce');
        const address = yield connector.getAddress();
        if (!address)
            throw new DynamicError('Missing address');
        const verifyArgs = yield getVerifyArgs({
            displaySiweStatement,
            environmentId,
            nonce,
            publicWalletAddress: address,
            siweStatement: getSiweStatement({ appName, siweStatement }),
            walletConnector: connector,
            walletProvider: 'embeddedWallet',
        });
        const passcodeArgs = source === PasswordSourceTypeEnum.Dynamic
            ? { password, passwordSource: source }
            : {};
        const updatedJwt = yield linkWallet(environmentId, Object.assign(Object.assign(Object.assign({}, passcodeArgs), verifyArgs), { backup: backupCode }), jwt);
        const user = updateJWTAndCreateUserProfile(updatedJwt);
        const newSelectedCredentialWallet = user.verifiedCredentials.find((cred) => cred.id === user.lastVerifiedCredentialId &&
            cred.format === 'blockchain');
        if (!newSelectedCredentialWallet) {
            throw new DynamicError('No primary wallet found');
        }
        setPrimaryWalletId(newSelectedCredentialWallet.id);
        setUser(user);
        connector.setVerifiedCredentials(user.verifiedCredentials);
        return newSelectedCredentialWallet;
    }), [
        appName,
        consumeNonce,
        displaySiweStatement,
        environmentId,
        setPrimaryWalletId,
        setUser,
        siweStatement,
    ]);
    const createNewCoinbaseMPCWallet = useCallback((connector, jwt, password) => __awaiter(void 0, void 0, void 0, function* () {
        const initialWalletPassword = password
            ? password
            : generateRandomPassword(DYNAMIC_PASSWORD_LENGTH);
        const source = password
            ? PasswordSourceTypeEnum.User
            : PasswordSourceTypeEnum.Dynamic;
        try {
            const backupCode = yield connector.generateWallet(source, initialWalletPassword);
            const jwtVerifiedCredential = yield linkCoinbaseMPCWallet({
                backupCode,
                connector,
                jwt,
                password: initialWalletPassword,
                source,
            });
            const coinbaseMPCWallet = {
                address: (yield (connector === null || connector === void 0 ? void 0 : connector.getAddress())) || '',
                authenticated: true,
                chain: (connector === null || connector === void 0 ? void 0 : connector.connectedChain) || '',
                connected: true,
                connector,
                id: jwtVerifiedCredential.id,
            };
            dynamicEvents.emit('embeddedWalletCreated', coinbaseMPCWallet, jwtVerifiedCredential);
            return coinbaseMPCWallet;
        }
        catch (error) {
            logger.error(error);
            if (error instanceof DynamicError &&
                error.code === 'create_embedded_wallet_error') {
                yield handleLogOut();
                setError(error.message);
            }
        }
        return undefined;
    }), [linkCoinbaseMPCWallet, handleLogOut, setError]);
    const createCoinbaseMPCWallet = useCallback((jwt, decodedJwt, chain = ChainEnum.Evm, password) => __awaiter(void 0, void 0, void 0, function* () {
        var _a;
        const connector = (_a = findCoinbaseMPCWallet(walletConnectorOptions)) === null || _a === void 0 ? void 0 : _a.walletConnector;
        if (!connector || !isCoinbaseMpcWalletConnector(connector)) {
            const error = new DynamicError('CoinbaseWaaSWalletConnectors not found');
            logger.error('Failed to create embedded wallet', error);
            dynamicEvents.emit('embeddedWalletFailed', error);
            setError(error.message);
            throw error;
        }
        setShowAuthFlow(false);
        const { fetchAuthToken } = getCoinbaseMPCConnectorFetchers({
            authToken: jwt,
            environmentId,
        });
        if (fetchAuthToken) {
            connector.setAuthTokenFetcher(fetchAuthToken);
        }
        const embeddedWalletVerifiedCredential = findEmbeddedWalletFromVerifiedCredentials(jwt, chain);
        // if user already has embedded wallet, set it as primary wallet and return
        if (embeddedWalletVerifiedCredential) {
            return returnExistingCoinbaseMPCWallet(connector, decodedJwt, embeddedWalletVerifiedCredential);
        }
        return createNewCoinbaseMPCWallet(connector, jwt, password);
    }), [
        walletConnectorOptions,
        setShowAuthFlow,
        environmentId,
        createNewCoinbaseMPCWallet,
        setError,
        returnExistingCoinbaseMPCWallet,
    ]);
    return {
        createCoinbaseMPCWallet,
    };
};

export { useCoinbaseMPC };
