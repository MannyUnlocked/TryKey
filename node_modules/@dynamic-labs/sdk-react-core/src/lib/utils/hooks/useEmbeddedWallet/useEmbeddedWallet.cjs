'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var React = require('react');
var walletConnectorCore = require('@dynamic-labs/wallet-connector-core');
require('../../../context/DynamicContext/DynamicContext.cjs');
var decodeJwt = require('../../../shared/utils/functions/decodeJwt/decodeJwt.cjs');
require('@dynamic-labs/iconic');
require('react/jsx-runtime');
require('../../../context/ViewContext/ViewContext.cjs');
require('../../../shared/logger.cjs');
require('@dynamic-labs/wallet-book');
require('../../constants/colors.cjs');
require('../../constants/values.cjs');
require('../../../shared/utils/classes/storage/localStorage.cjs');
require('@dynamic-labs/sdk-api');
require('@dynamic-labs/utils');
require('../../../shared/consts/index.cjs');
require('../../../events/dynamicEvents.cjs');
require('../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../context/ErrorContext/ErrorContext.cjs');
var findEmbeddedWalletFromVerifiedCredentials = require('../../functions/findEmbeddedWalletFromVerifiedCredentials/findEmbeddedWalletFromVerifiedCredentials.cjs');
require('@dynamic-labs/multi-wallet');
var getAuthToken = require('../../functions/getAuthToken/getAuthToken.cjs');
require('react-international-phone');
var getUserWalletsFromVerifiedCredentials = require('../../functions/getUserWalletsFromVerifiedCredentials/getUserWalletsFromVerifiedCredentials.cjs');
var isEmbeddedWalletPresent = require('../../functions/isEmbeddedWalletPresent/isEmbeddedWalletPresent.cjs');
var isTurnkeyEnabled = require('../../functions/isTurnkeyEnabled/isTurnkeyEnabled.cjs');
require('viem');
require('viem/chains');
var findCoinbaseMPCWallet = require('../../functions/findCoinbaseMPCWallet/findCoinbaseMPCWallet.cjs');
var requiresPasswordForEmbeddedWallet = require('../../functions/requiresPasswordForEmbeddedWallet/requiresPasswordForEmbeddedWallet.cjs');
var requiresPasswordForEmbeddedWalletOnSignup = require('../../functions/requiresPasswordForEmbeddedWalletOnSignup/requiresPasswordForEmbeddedWalletOnSignup.cjs');
var isCoinbaseWaasEnabled = require('../../functions/isCoinbaseWaasEnabled/isCoinbaseWaasEnabled.cjs');
require('../../../config/ApiEndpoint.cjs');
require('../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
var WalletContext = require('../../../context/WalletContext/WalletContext.cjs');
var useEmbeddedWalletPassword = require('../useEmbeddedWalletPassword/useEmbeddedWalletPassword.cjs');
var useCoinbaseMPC = require('./useCoinbaseMPC/useCoinbaseMPC.cjs');
var useTurnkey = require('./useTurnkey/useTurnkey.cjs');
require('../../../context/ThemeContext/ThemeContext.cjs');
require('@dynamic-labs/types');
require('yup');
require('react-i18next');
require('../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../../context/MockContext/MockContext.cjs');
require('../useUserUpdateRequest/useUpdateUser/useUpdateUser.cjs');
require('../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../components/Alert/Alert.cjs');
require('../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../components/IconButton/IconButton.cjs');
require('../../../components/InlineWidget/InlineWidget.cjs');
require('../../../components/Input/Input.cjs');
require('../../../components/IsBrowser/IsBrowser.cjs');
require('../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../components/PhoneNumberField/usePhoneInputLogic/usePhoneInputLogic.cjs');
require('../../../components/Popper/Popper/Popper.cjs');
require('../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../../../views/WalletList/WalletList.cjs');
require('../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('i18next');
require('@hcaptcha/react-hcaptcha');
require('../../../context/LoadingContext/LoadingContext.cjs');
require('../../../context/FooterAnimationContext/index.cjs');
require('../../../locale/locale.cjs');
require('../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
var useInternalDynamicContext = require('../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');

// Hook exposed to customers and used internally to trigger embedded wallet creation
const useEmbeddedWallet = () => {
    const { projectSettings, onboardingOnlyJwt, walletConnectorOptions } = useInternalDynamicContext.useInternalDynamicContext();
    const { createPassword: internalCreatePassword } = useEmbeddedWalletPassword.useEmbeddedWalletPassword();
    const { createCoinbaseMPCWallet } = useCoinbaseMPC.useCoinbaseMPC();
    const { createTurnkeyWallet } = useTurnkey.useTurnkey();
    const { isLoadingEmbeddedWallet, setIsLoadingEmbeddedWallet } = WalletContext.useWalletContext();
    const userHasEmbeddedWallet = () => {
        var _a;
        const jwt = (_a = getAuthToken.getAuthToken()) !== null && _a !== void 0 ? _a : onboardingOnlyJwt;
        if (!jwt) {
            return false;
        }
        return isEmbeddedWalletPresent.isEmbeddedWalletPresent(jwt);
    };
    const createPassword = React.useCallback((showIntro) => _tslib.__awaiter(void 0, void 0, void 0, function* () { return internalCreatePassword(showIntro); }), [internalCreatePassword]);
    const createEmbeddedWallet = React.useCallback((chain) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        var _a, _b, _c;
        const jwt = (_a = getAuthToken.getAuthToken()) !== null && _a !== void 0 ? _a : onboardingOnlyJwt;
        const decodedJwt = decodeJwt.decodeJwt(jwt);
        if (!jwt || !decodedJwt) {
            throw new Error('User is not logged in');
        }
        const userWaletsCredentials = getUserWalletsFromVerifiedCredentials.getUserWalletsFromVerifiedCredentials(jwt);
        const embeddedWalletVerifiedCredential = findEmbeddedWalletFromVerifiedCredentials.findEmbeddedWalletFromVerifiedCredentials(jwt, chain);
        // if user has a wallet and it's not embedded,
        // throw error to follow another flow and set up the right wallet
        if ((userWaletsCredentials === null || userWaletsCredentials === void 0 ? void 0 : userWaletsCredentials.length) && !embeddedWalletVerifiedCredential) {
            throw new Error('Primary wallet is not an embedded wallet');
        }
        const isTurnkeyProviderEnabled = isTurnkeyEnabled.isTurnkeyEnabled(projectSettings);
        const isCoinbaseWaaSProviderEnabled = isCoinbaseWaasEnabled.isCoinbaseWaasEnabled(projectSettings);
        if (!isTurnkeyProviderEnabled && !isCoinbaseWaaSProviderEnabled) {
            throw new Error('No embedded wallet is enabled. Go to the dashboard and make sure to have both Embedded wallets and at least one EVM network enabled. Also, check if EthereumWalletConnectors is in the DynamicContextProvider > settings > walletConnectors.');
        }
        setIsLoadingEmbeddedWallet(true);
        // since we can dynamically change the settings from demov2, we need to set
        // requires password prop here in case the connector has already been initialized with a different value
        const connector = (_b = findCoinbaseMPCWallet.findCoinbaseMPCWallet(walletConnectorOptions)) === null || _b === void 0 ? void 0 : _b.walletConnector;
        if (walletConnectorCore.isCoinbaseMpcWalletConnector(connector)) {
            connector.setRequiredPassword((_c = requiresPasswordForEmbeddedWallet.requiresPasswordForEmbeddedWallet(projectSettings)) !== null && _c !== void 0 ? _c : false);
        }
        let password;
        if (!embeddedWalletVerifiedCredential &&
            requiresPasswordForEmbeddedWalletOnSignup.requiresPasswordForEmbeddedWalletOnSignup(projectSettings)) {
            password = yield internalCreatePassword(false, true);
        }
        let wallet;
        if (isCoinbaseWaaSProviderEnabled) {
            wallet = yield createCoinbaseMPCWallet(jwt, decodedJwt, chain, password);
        }
        else if (isTurnkeyProviderEnabled) {
            // TEMP: immediately disable loading state
            setIsLoadingEmbeddedWallet(false);
            wallet = yield createTurnkeyWallet(jwt, decodedJwt, chain);
        }
        setIsLoadingEmbeddedWallet(false);
        return wallet;
    }), [
        createCoinbaseMPCWallet,
        createTurnkeyWallet,
        internalCreatePassword,
        onboardingOnlyJwt,
        projectSettings,
        setIsLoadingEmbeddedWallet,
        walletConnectorOptions,
    ]);
    return {
        createEmbeddedWallet,
        createPassword,
        isLoadingEmbeddedWallet,
        userHasEmbeddedWallet,
    };
};

exports.useEmbeddedWallet = useEmbeddedWallet;
