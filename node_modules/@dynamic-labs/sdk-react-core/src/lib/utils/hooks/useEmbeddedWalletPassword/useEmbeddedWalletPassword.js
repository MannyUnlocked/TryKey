import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { useCallback } from 'react';
import '../../../context/DynamicContext/DynamicContext.js';
import '@dynamic-labs/sdk-api';
import { logger } from '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import { useViewContext } from '../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '../../constants/colors.js';
import '../../constants/values.js';
import '../../../shared/utils/classes/storage/localStorage.js';
import '@dynamic-labs/utils';
import '../../../shared/consts/index.js';
import { dynamicEvents } from '../../../events/dynamicEvents.js';
import '../../../context/CaptchaContext/CaptchaContext.js';
import '../../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import { getAuthToken } from '../../functions/getAuthToken/getAuthToken.js';
import 'react-international-phone';
import 'viem';
import 'viem/chains';
import { claimEmbeddedWallet } from '../../../data/api.js';
import { updateJWTAndCreateUserProfile } from '../../functions/updateJWTAndCreateUserProfile/updateJWTAndCreateUserProfile.js';
import '../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../../context/WalletContext/WalletContext.js';
import '../../../context/ThemeContext/ThemeContext.js';
import '@dynamic-labs/types';
import 'yup';
import 'react-i18next';
import '../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../context/MockContext/MockContext.js';
import '../useUserUpdateRequest/useUpdateUser/useUpdateUser.js';
import '../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../components/Alert/Alert.js';
import '../../../components/ShadowDOM/ShadowDOM.js';
import '../../../components/IconButton/IconButton.js';
import '../../../components/InlineWidget/InlineWidget.js';
import '../../../components/Input/Input.js';
import '../../../components/IsBrowser/IsBrowser.js';
import '../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../components/PhoneNumberField/usePhoneInputLogic/usePhoneInputLogic.js';
import '../../../components/Popper/Popper/Popper.js';
import '../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../../../views/WalletList/WalletList.js';
import '../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import 'i18next';
import '@hcaptcha/react-hcaptcha';
import '../../../context/LoadingContext/LoadingContext.js';
import '../../../config/ApiEndpoint.js';
import '../../../context/FooterAnimationContext/index.js';
import '../../../locale/locale.js';
import '../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../context/PasskeyContext/PasskeyContext.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import { useInternalDynamicContext } from '../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.js';

const useEmbeddedWalletPassword = () => {
    const { primaryWallet, onboardingOnlyJwt, setShowAuthFlow, environmentId, setUser, } = useInternalDynamicContext();
    const { setView } = useViewContext();
    const createPassword = useCallback((isClaim, isSignUp) => __awaiter(void 0, void 0, void 0, function* () {
        setShowAuthFlow(true, { ignoreIfIsEmbeddedWidget: false });
        if (isClaim) {
            setView('wallet-claim-intro');
        }
        else {
            setView('create-password-view', {
                isSignUp,
                notCalledFromWalletUtils: true,
            });
        }
        return new Promise((resolve, reject) => {
            dynamicEvents.once('embeddedWalletCreatePasswordCompleted', (password) => resolve(password));
            dynamicEvents.once('embeddedWalletCreatePasswordFailed', (error) => reject(error));
        });
    }), [setShowAuthFlow, setView]);
    const claimWallet = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {
        var _a;
        try {
            if (!primaryWallet) {
                throw new Error('No primary wallet');
            }
            const jwt = (_a = getAuthToken()) !== null && _a !== void 0 ? _a : onboardingOnlyJwt;
            const refreshedToken = yield claimEmbeddedWallet({ environmentId, walletId: primaryWallet.id }, jwt);
            // if an error occurs while calling the api, the user won't be logged out
            if ('code' in refreshedToken) {
                logger.error('Error updating jwt after claiming wallet');
                return;
            }
            try {
                const user = updateJWTAndCreateUserProfile(refreshedToken.jwt);
                setUser(user);
            }
            catch (error) {
                logger.error('Error updating jwt after claiming wallet', error);
            }
        }
        catch (error) {
            logger.error('Error claiming wallet', error);
            throw new Error('Error claiming wallet');
        }
    }), [environmentId, onboardingOnlyJwt, primaryWallet, setUser]);
    return {
        claimWallet,
        createPassword,
    };
};

export { useEmbeddedWalletPassword };
