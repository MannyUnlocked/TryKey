import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { useEffect } from 'react';
import { DynamicError } from '@dynamic-labs/utils';
import { fetchProjectSettings } from '../../../data/api.js';
import '@dynamic-labs/sdk-api';
import '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import { PROJECT_SETTINGS_STORAGE_KEY, CONNECTED_WALLETS_INFO } from '../../constants/localStorage.js';
import '../../constants/colors.js';
import '../../constants/values.js';
import { LocalStorage } from '../../../shared/utils/classes/storage/localStorage.js';
import { useLocalStorage } from '../../../shared/utils/hooks/useLocalStorage/useLocalStorage.js';
import '../../../shared/consts/index.js';
import { validateLocalStorageExpiry } from '../../../context/DynamicContext/validators/validators.js';
import '../../../events/dynamicEvents.js';
import '../../../context/DynamicContext/DynamicContext.js';
import '../../../context/CaptchaContext/CaptchaContext.js';
import '../../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import 'viem';
import 'viem/chains';
import '../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../../context/WalletContext/WalletContext.js';
import { usePromise } from '../usePromise/usePromise.js';
import '../../../context/ThemeContext/ThemeContext.js';
import '@dynamic-labs/types';
import 'yup';
import 'react-i18next';
import '../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../context/MockContext/MockContext.js';
import '../useUserUpdateRequest/useUpdateUser/useUpdateUser.js';
import '../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../components/Alert/Alert.js';
import '../../../components/ShadowDOM/ShadowDOM.js';
import '../../../components/IconButton/IconButton.js';
import '../../../components/InlineWidget/InlineWidget.js';
import '../../../components/Input/Input.js';
import '../../../components/IsBrowser/IsBrowser.js';
import '../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../components/PhoneNumberField/usePhoneInputLogic/usePhoneInputLogic.js';
import '../../../components/Popper/Popper/Popper.js';
import '../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../../../views/WalletList/WalletList.js';
import '../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import 'i18next';
import '@hcaptcha/react-hcaptcha';
import '../../../context/LoadingContext/LoadingContext.js';
import '../../../config/ApiEndpoint.js';
import '../../../context/FooterAnimationContext/index.js';
import '../../../locale/locale.js';
import '../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../context/PasskeyContext/PasskeyContext.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';

const useFetchProjectSettings = ({ authToken, environmentId, retries = 2, }) => {
    const [lsSettings, setLsSettings, removeLsSettings] = useLocalStorage(PROJECT_SETTINGS_STORAGE_KEY, undefined, validateLocalStorageExpiry);
    const lsSettingsExists = (lsSettings === null || lsSettings === void 0 ? void 0 : lsSettings.settings) !== undefined ? true : false;
    if (lsSettings &&
        lsSettings.environmentId &&
        lsSettings.environmentId !== environmentId) {
        removeLsSettings();
    }
    const { isLoading } = usePromise(() => __awaiter(void 0, void 0, void 0, function* () {
        const settings = yield fetchProjectSettings(environmentId);
        if (!settings)
            throw new DynamicError('Settings are not defined');
        return settings;
    }), {
        deps: [environmentId],
        enabled: !lsSettingsExists,
        onResolve: (projectSettings) => {
            const expiry = new Date().getTime() + 60000 * 5;
            setLsSettings({
                environmentId,
                expiry: expiry,
                settings: projectSettings,
            });
        },
        retries,
    });
    /**
     * This useEffect is require to clean up the project settings
     * from local storage when no token or connect only wallet is
     * present
     */
    useEffect(() => {
        const [connectedWalletData] = LocalStorage.getFromLS(CONNECTED_WALLETS_INFO) || [];
        if (!authToken && !connectedWalletData) {
            removeLsSettings();
        }
    }, [authToken, removeLsSettings]);
    return {
        isLoading,
        projectSettings: lsSettings === null || lsSettings === void 0 ? void 0 : lsSettings.settings,
    };
};

export { useFetchProjectSettings };
