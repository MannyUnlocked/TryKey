import { useCallback } from 'react';
import { NextViewEnum } from '@dynamic-labs/sdk-api';
import { useVerification } from '../../../context/VerificationContext/VerificationContext.js';
import { formatPhone } from '../../functions/formatPhone/formatPhone.js';

const getResponseInfo = (response, destination) => {
    var _a, _b, _c, _d, _e, _f, _g;
    if (destination === 'email')
        return {
            displayDestination: (_a = response.emailVerification) === null || _a === void 0 ? void 0 : _a.email,
            verificationUUID: (_b = response.emailVerification) === null || _b === void 0 ? void 0 : _b.verificationUUID,
        };
    return {
        displayDestination: formatPhone('+' +
            ((_d = (_c = response.smsVerification) === null || _c === void 0 ? void 0 : _c.phoneCountryCode) !== null && _d !== void 0 ? _d : '') +
            ((_f = (_e = response.smsVerification) === null || _e === void 0 ? void 0 : _e.phoneNumber) !== null && _f !== void 0 ? _f : '')),
        verificationUUID: (_g = response.smsVerification) === null || _g === void 0 ? void 0 : _g.verificationUUID,
    };
};
const isVerificationRequired = (updateSelfResponse) => {
    if (updateSelfResponse.nextView === NextViewEnum.VerifyEmail)
        return 'email';
    if (updateSelfResponse.nextView === NextViewEnum.VerifySms)
        return 'sms';
    return undefined;
};
const useHandleVerificationRequired = (verifyOtp) => {
    const { setVerificationUUID, setDisplayedDestination } = useVerification();
    return useCallback(({ updateUserProfileResponse, missingFields, destination, }) => {
        // Use this information in the Verification view
        const { displayDestination, verificationUUID } = getResponseInfo(updateUserProfileResponse, destination);
        setDisplayedDestination(displayDestination);
        setVerificationUUID(verificationUUID);
        // DYN-2046 - Customers have the opportunity to programmatically use our email verification and profile editing.
        // VerifyEmailFN was scoped to bypass the problem with memoization of the state at the beginning of Promise.
        // setDisplayedDestination and setVerificationUUID in the above lines will are not visible in this promise.
        const scopedVerify = (verificationToken) => verifyOtp(verificationToken, destination, verificationUUID);
        if (destination === 'email')
            return {
                isEmailVerificationRequired: true,
                isSmsVerificationRequired: false,
                missingFields,
                updateUserProfileResponse,
                verifyOtp: scopedVerify,
            };
        return {
            isEmailVerificationRequired: false,
            isSmsVerificationRequired: true,
            missingFields,
            updateUserProfileResponse,
            verifyOtp: scopedVerify,
        };
    }, [setDisplayedDestination, setVerificationUUID, verifyOtp]);
};

export { getResponseInfo, isVerificationRequired, useHandleVerificationRequired };
