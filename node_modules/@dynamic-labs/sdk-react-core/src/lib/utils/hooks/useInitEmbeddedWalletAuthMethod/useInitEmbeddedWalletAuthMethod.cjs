'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var React = require('react');
require('../../../context/DynamicContext/DynamicContext.cjs');
require('@dynamic-labs/sdk-api');
var logger = require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
var ViewContext = require('../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../constants/colors.cjs');
require('../../constants/values.cjs');
require('../../../shared/utils/classes/storage/localStorage.cjs');
require('@dynamic-labs/utils');
require('../../../shared/consts/index.cjs');
var dynamicEvents = require('../../../events/dynamicEvents.cjs');
require('../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('viem');
require('viem/chains');
var getEOAWallet = require('../../functions/getEOAWallet/getEOAWallet.cjs');
require('../../../config/ApiEndpoint.cjs');
var updateJWTAndCreateUserProfile = require('../../functions/updateJWTAndCreateUserProfile/updateJWTAndCreateUserProfile.cjs');
require('../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../../context/WalletContext/WalletContext.cjs');
require('../../../context/ThemeContext/ThemeContext.cjs');
var constants = require('../../../views/Passkey/PasskeyRecovery/constants.cjs');
var passkeyRecovery = require('../../../views/Passkey/utils/passkeyRecovery/passkeyRecovery.cjs');
require('@dynamic-labs/types');
require('yup');
require('react-i18next');
require('../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../../context/MockContext/MockContext.cjs');
require('../useUserUpdateRequest/useUpdateUser/useUpdateUser.cjs');
require('../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../components/Alert/Alert.cjs');
require('../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../components/IconButton/IconButton.cjs');
require('../../../components/InlineWidget/InlineWidget.cjs');
require('../../../components/Input/Input.cjs');
require('../../../components/IsBrowser/IsBrowser.cjs');
require('../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../components/PhoneNumberField/usePhoneInputLogic/usePhoneInputLogic.cjs');
require('../../../components/Popper/Popper/Popper.cjs');
require('../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../../../views/WalletList/WalletList.cjs');
require('../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('i18next');
require('@hcaptcha/react-hcaptcha');
require('../../../context/LoadingContext/LoadingContext.cjs');
require('../../../context/FooterAnimationContext/index.cjs');
require('../../../locale/locale.cjs');
require('../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
var useInternalDynamicContext = require('../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');

// This hook needs to be async that's why it's not using useMutation
const useInitEmbeddedWalletAuthMethod = () => {
    const { authToken, primaryWallet, environmentId, user, projectSettings, setShowAuthFlow, setUser, } = useInternalDynamicContext.useInternalDynamicContext();
    const { setView } = ViewContext.useViewContext();
    const [isLoading, setIsLoading] = React.useState(false);
    const [error, setError] = React.useState();
    const initAuthMethod = ({ authenticatorType, iframeContainer, currentAction, }) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        var _a, _b, _c, _d;
        setIsLoading(true);
        const wallet = getEOAWallet.getEOAWallet(primaryWallet, (user === null || user === void 0 ? void 0 : user.verifiedCredentials) || []);
        const sessionExpiration = ((_b = (_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.embeddedWallets) === null || _a === void 0 ? void 0 : _a.sessionKeyDuration) === null || _b === void 0 ? void 0 : _b.amount) || 0;
        const sessionExpirationUnit = ((_d = (_c = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.embeddedWallets) === null || _c === void 0 ? void 0 : _c.sessionKeyDuration) === null || _d === void 0 ? void 0 : _d.unit) ===
            'minutes'
            ? 60
            : 3600;
        const showEmailBundle = authenticatorType === 'email' ||
            !(wallet === null || wallet === void 0 ? void 0 : wallet.connector)
                .getAuthenticatorHandler()
                .isSessionActive();
        try {
            const result = yield passkeyRecovery.initEmbeddedWalletSession({
                authToken,
                authenticatorType,
                environmentId,
                iframeContainer,
                iframeElementId: constants.iframeElementId,
                sessionExpiration: sessionExpiration * sessionExpirationUnit || undefined,
                userEmail: (user === null || user === void 0 ? void 0 : user.email) || '',
                wallet,
            });
            if (result && result.jwt) {
                setUser(updateJWTAndCreateUserProfile.updateJWTAndCreateUserProfile(result.jwt));
            }
            if (showEmailBundle) {
                setView('passkey-recovery-bundle', {
                    authenticatorType,
                    currentAction,
                });
                setShowAuthFlow(true, {
                    ignoreIfIsEmbeddedWidget: false,
                    performMultiWalletChecks: false,
                });
            }
            else {
                setShowAuthFlow(false);
            }
        }
        catch (err) {
            setError(err);
            logger.logger.error('Failed to create embedded wallet', err);
            dynamicEvents.dynamicEvents.emit('passkeyRecoveryFailed', err);
        }
        finally {
            setIsLoading(false);
        }
    });
    return {
        error,
        initAuthMethod,
        isLoading,
    };
};

exports.useInitEmbeddedWalletAuthMethod = useInitEmbeddedWalletAuthMethod;
