'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var walletConnectorCore = require('@dynamic-labs/wallet-connector-core');
require('@dynamic-labs/sdk-api');
require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('react/jsx-runtime');
require('../../../context/ViewContext/ViewContext.cjs');
require('react');
require('@dynamic-labs/wallet-book');
require('../../constants/colors.cjs');
require('../../constants/values.cjs');
require('../../../shared/utils/classes/storage/localStorage.cjs');
require('@dynamic-labs/utils');
require('../../../shared/consts/index.cjs');
require('../../../../../_virtual/_tslib.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('viem');
require('viem/chains');
var getCoinbaseMPCConnectorFetchers = require('../../functions/getCoinbaseMPCConnectorFetchers/getCoinbaseMPCConnectorFetchers.cjs');

const useSetWalletConnectorFetchers = (authToken, walletOptions, environmentId) => {
    if (!authToken || !(walletOptions === null || walletOptions === void 0 ? void 0 : walletOptions.length))
        return;
    const { fetchAuthToken, fetchBackupCode, fetchPasscode } = getCoinbaseMPCConnectorFetchers.getCoinbaseMPCConnectorFetchers({ authToken, environmentId });
    walletOptions.forEach((walletOption) => {
        if (walletConnectorCore.isCoinbaseMpcWalletConnector(walletOption.walletConnector)) {
            walletOption.walletConnector.setAuthTokenFetcher(fetchAuthToken);
            walletOption.walletConnector.setBackupCodeFetcher(fetchBackupCode);
            walletOption.walletConnector.setPasscodeFetcher(fetchPasscode);
        }
    });
};

exports.useSetWalletConnectorFetchers = useSetWalletConnectorFetchers;
