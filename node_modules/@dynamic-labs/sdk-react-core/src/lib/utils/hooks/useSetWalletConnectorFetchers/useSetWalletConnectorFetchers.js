import { isCoinbaseMpcWalletConnector } from '@dynamic-labs/wallet-connector-core';
import '@dynamic-labs/sdk-api';
import '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import 'react/jsx-runtime';
import '../../../context/ViewContext/ViewContext.js';
import 'react';
import '@dynamic-labs/wallet-book';
import '../../constants/colors.js';
import '../../constants/values.js';
import '../../../shared/utils/classes/storage/localStorage.js';
import '@dynamic-labs/utils';
import '../../../shared/consts/index.js';
import '../../../../../_virtual/_tslib.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import 'viem';
import 'viem/chains';
import { getCoinbaseMPCConnectorFetchers } from '../../functions/getCoinbaseMPCConnectorFetchers/getCoinbaseMPCConnectorFetchers.js';

const useSetWalletConnectorFetchers = (authToken, walletOptions, environmentId) => {
    if (!authToken || !(walletOptions === null || walletOptions === void 0 ? void 0 : walletOptions.length))
        return;
    const { fetchAuthToken, fetchBackupCode, fetchPasscode } = getCoinbaseMPCConnectorFetchers({ authToken, environmentId });
    walletOptions.forEach((walletOption) => {
        if (isCoinbaseMpcWalletConnector(walletOption.walletConnector)) {
            walletOption.walletConnector.setAuthTokenFetcher(fetchAuthToken);
            walletOption.walletConnector.setBackupCodeFetcher(fetchBackupCode);
            walletOption.walletConnector.setPasscodeFetcher(fetchPasscode);
        }
    });
};

export { useSetWalletConnectorFetchers };
