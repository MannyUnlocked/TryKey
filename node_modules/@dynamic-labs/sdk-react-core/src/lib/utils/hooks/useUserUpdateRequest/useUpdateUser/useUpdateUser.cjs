'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../../_virtual/_tslib.cjs');
var React = require('react');
var yup = require('yup');
require('../../../../context/DynamicContext/DynamicContext.cjs');
var decodeJwt = require('../../../../shared/utils/functions/decodeJwt/decodeJwt.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
require('../../../../context/ViewContext/ViewContext.cjs');
require('../../../../shared/logger.cjs');
require('@dynamic-labs/wallet-book');
require('../../../constants/colors.cjs');
require('../../../constants/values.cjs');
require('../../../../shared/utils/classes/storage/localStorage.cjs');
require('@dynamic-labs/sdk-api');
require('@dynamic-labs/utils');
require('../../../../shared/consts/index.cjs');
require('../../../../events/dynamicEvents.cjs');
require('../../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('viem');
require('viem/chains');
var api = require('../../../../data/api.cjs');
require('../../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../../context/AccountExistsContext/AccountExistsContext.cjs');
var useOtpVerificationRequest = require('../../authenticationHooks/useOtpVerificationRequest/useOtpVerificationRequest.cjs');
require('react-dom');
require('../../../../context/WalletContext/WalletContext.cjs');
require('../../../../context/ThemeContext/ThemeContext.cjs');
var useHandleVerificationRequired = require('../../useHandleVerificationRequired/useHandleVerificationRequired.cjs');
require('@dynamic-labs/types');
var useUpdateUserProfileByJWTCallback = require('../../useUpdateUserProfileByJWTCallback/useUpdateUserProfileByJWTCallback.cjs');
require('react-i18next');
var FieldsStateContext = require('../../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../../../context/MockContext/MockContext.cjs');
require('../../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../../components/Alert/Alert.cjs');
require('../../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../../components/IconButton/IconButton.cjs');
require('../../../../components/InlineWidget/InlineWidget.cjs');
require('../../../../components/Input/Input.cjs');
require('../../../../components/IsBrowser/IsBrowser.cjs');
require('../../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../../components/PhoneNumberField/usePhoneInputLogic/usePhoneInputLogic.cjs');
require('../../../../components/Popper/Popper/Popper.cjs');
require('../../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../../../../context/VerificationContext/VerificationContext.cjs');
require('../../../../views/WalletList/WalletList.cjs');
require('../../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('i18next');
require('@hcaptcha/react-hcaptcha');
require('../../../../context/LoadingContext/LoadingContext.cjs');
require('../../../../config/ApiEndpoint.cjs');
require('../../../../context/FooterAnimationContext/index.cjs');
require('../../../../locale/locale.cjs');
require('../../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
var useInternalDynamicContext = require('../../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');

// User Fields Schema without captchaToken and policiesConsent properties
const userFieldsSchema = yup.object().shape({
    alias: yup.string(),
    btcWallet: yup.string(),
    ckbWallet: yup.string(),
    country: yup.string(),
    discordNotification: yup.boolean(),
    dogeWallet: yup.string(),
    email: yup.string(),
    emailNotification: yup.boolean(),
    firstName: yup.string(),
    jobTitle: yup.string(),
    kasWallet: yup.string(),
    kdaWallet: yup.string(),
    lastName: yup.string(),
    ltcWallet: yup.string(),
    metadata: yup.object(),
    newsletterNotification: yup.boolean(),
    phoneNumber: yup.string(),
    tShirtSize: yup.string(),
    team: yup.string(),
    username: yup.string(),
});
const useUpdateUser = (validationSchemaStripUnknown) => {
    const { authToken, onboardingOnlyJwt, environmentId } = useInternalDynamicContext.useInternalDynamicContext();
    const jwtToken = onboardingOnlyJwt || authToken;
    const { updateUserProfileByJWT } = useUpdateUserProfileByJWTCallback.useUpdateUserProfileByJWTCallback();
    const { verifyOtp } = useOtpVerificationRequest.useOtpVerificationRequest();
    const handleVerificationRequired = useHandleVerificationRequired.useHandleVerificationRequired(verifyOtp);
    const { selectedPhoneCountry } = FieldsStateContext.useFieldsState();
    return React.useCallback((userFields, userEnvironmentId) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        var _a;
        // `stripUnknown: true` will automatically strip out any values in the metadata object
        // so we need to pull out the metadata object here and then re-add it after stripping unknown fields
        const { metadata } = userFields;
        const validatedUserFields = yield userFieldsSchema.validate(userFields, {
            stripUnknown: validationSchemaStripUnknown,
        });
        // If phone number is just the country code (preceded by "+") and nothing else,
        // that means we should treat it as empty.
        //
        // Elaboration: the phone input field, when using the logic from the "react-international-phone" lib
        // will always have at least a + and the country code as value (though they are omitted from view).
        // That means if the user tries to erase his phone number from the input field, the phone number value
        // will still be `+${countryDialCode}`.
        // If we were to leave this in, the api would reject this as an invalid number. The user's intention is to
        // erase his phone number, so we clear this field out to achieve that.
        if (validatedUserFields.phoneNumber &&
            selectedPhoneCountry.current &&
            validatedUserFields.phoneNumber.length ===
                selectedPhoneCountry.current.dialCode.length + 1)
            validatedUserFields.phoneNumber = '';
        const updateUserProfileResponse = yield api.updateUserProfileFields(jwtToken, userEnvironmentId || environmentId, Object.assign(Object.assign({}, validatedUserFields), { metadata }));
        // check if decoded JWT still somehow has missing fields, we can't proceed if it does
        const decodedJwt = decodeJwt.decodeJwt(updateUserProfileResponse.jwt);
        const missingFields = (_a = decodedJwt === null || decodedJwt === void 0 ? void 0 : decodedJwt.missingFields) !== null && _a !== void 0 ? _a : [];
        const requiredVerificationDestination = useHandleVerificationRequired.isVerificationRequired(updateUserProfileResponse);
        if (requiredVerificationDestination)
            return handleVerificationRequired({
                destination: requiredVerificationDestination,
                missingFields,
                updateUserProfileResponse,
            });
        // If verification is not needed then we can update the user profile immediately.
        yield updateUserProfileByJWT(updateUserProfileResponse.jwt);
        return {
            isEmailVerificationRequired: false,
            isSmsVerificationRequired: false,
            missingFields,
            updateUserProfileResponse,
        };
    }), [
        validationSchemaStripUnknown,
        selectedPhoneCountry,
        jwtToken,
        environmentId,
        handleVerificationRequired,
        updateUserProfileByJWT,
    ]);
};

exports.useUpdateUser = useUpdateUser;
