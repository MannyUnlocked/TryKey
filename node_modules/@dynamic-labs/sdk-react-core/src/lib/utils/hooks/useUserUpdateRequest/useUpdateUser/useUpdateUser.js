import { __awaiter } from '../../../../../../_virtual/_tslib.js';
import { useCallback } from 'react';
import { object, string, boolean } from 'yup';
import '../../../../context/DynamicContext/DynamicContext.js';
import { decodeJwt } from '../../../../shared/utils/functions/decodeJwt/decodeJwt.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../../../context/ViewContext/ViewContext.js';
import '../../../../shared/logger.js';
import '@dynamic-labs/wallet-book';
import '../../../constants/colors.js';
import '../../../constants/values.js';
import '../../../../shared/utils/classes/storage/localStorage.js';
import '@dynamic-labs/sdk-api';
import '@dynamic-labs/utils';
import '../../../../shared/consts/index.js';
import '../../../../events/dynamicEvents.js';
import '../../../../context/CaptchaContext/CaptchaContext.js';
import '../../../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import 'viem';
import 'viem/chains';
import { updateUserProfileFields } from '../../../../data/api.js';
import '../../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../../context/AccountExistsContext/AccountExistsContext.js';
import { useOtpVerificationRequest } from '../../authenticationHooks/useOtpVerificationRequest/useOtpVerificationRequest.js';
import 'react-dom';
import '../../../../context/WalletContext/WalletContext.js';
import '../../../../context/ThemeContext/ThemeContext.js';
import { useHandleVerificationRequired, isVerificationRequired } from '../../useHandleVerificationRequired/useHandleVerificationRequired.js';
import '@dynamic-labs/types';
import { useUpdateUserProfileByJWTCallback } from '../../useUpdateUserProfileByJWTCallback/useUpdateUserProfileByJWTCallback.js';
import 'react-i18next';
import { useFieldsState } from '../../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../../context/MockContext/MockContext.js';
import '../../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../../components/Alert/Alert.js';
import '../../../../components/ShadowDOM/ShadowDOM.js';
import '../../../../components/IconButton/IconButton.js';
import '../../../../components/InlineWidget/InlineWidget.js';
import '../../../../components/Input/Input.js';
import '../../../../components/IsBrowser/IsBrowser.js';
import '../../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../../components/PhoneNumberField/usePhoneInputLogic/usePhoneInputLogic.js';
import '../../../../components/Popper/Popper/Popper.js';
import '../../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../../../../context/VerificationContext/VerificationContext.js';
import '../../../../views/WalletList/WalletList.js';
import '../../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import 'i18next';
import '@hcaptcha/react-hcaptcha';
import '../../../../context/LoadingContext/LoadingContext.js';
import '../../../../config/ApiEndpoint.js';
import '../../../../context/FooterAnimationContext/index.js';
import '../../../../locale/locale.js';
import '../../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../../context/PasskeyContext/PasskeyContext.js';
import '../../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import { useInternalDynamicContext } from '../../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.js';

// User Fields Schema without captchaToken and policiesConsent properties
const userFieldsSchema = object().shape({
    alias: string(),
    btcWallet: string(),
    ckbWallet: string(),
    country: string(),
    discordNotification: boolean(),
    dogeWallet: string(),
    email: string(),
    emailNotification: boolean(),
    firstName: string(),
    jobTitle: string(),
    kasWallet: string(),
    kdaWallet: string(),
    lastName: string(),
    ltcWallet: string(),
    metadata: object(),
    newsletterNotification: boolean(),
    phoneNumber: string(),
    tShirtSize: string(),
    team: string(),
    username: string(),
});
const useUpdateUser = (validationSchemaStripUnknown) => {
    const { authToken, onboardingOnlyJwt, environmentId } = useInternalDynamicContext();
    const jwtToken = onboardingOnlyJwt || authToken;
    const { updateUserProfileByJWT } = useUpdateUserProfileByJWTCallback();
    const { verifyOtp } = useOtpVerificationRequest();
    const handleVerificationRequired = useHandleVerificationRequired(verifyOtp);
    const { selectedPhoneCountry } = useFieldsState();
    return useCallback((userFields, userEnvironmentId) => __awaiter(void 0, void 0, void 0, function* () {
        var _a;
        // `stripUnknown: true` will automatically strip out any values in the metadata object
        // so we need to pull out the metadata object here and then re-add it after stripping unknown fields
        const { metadata } = userFields;
        const validatedUserFields = yield userFieldsSchema.validate(userFields, {
            stripUnknown: validationSchemaStripUnknown,
        });
        // If phone number is just the country code (preceded by "+") and nothing else,
        // that means we should treat it as empty.
        //
        // Elaboration: the phone input field, when using the logic from the "react-international-phone" lib
        // will always have at least a + and the country code as value (though they are omitted from view).
        // That means if the user tries to erase his phone number from the input field, the phone number value
        // will still be `+${countryDialCode}`.
        // If we were to leave this in, the api would reject this as an invalid number. The user's intention is to
        // erase his phone number, so we clear this field out to achieve that.
        if (validatedUserFields.phoneNumber &&
            selectedPhoneCountry.current &&
            validatedUserFields.phoneNumber.length ===
                selectedPhoneCountry.current.dialCode.length + 1)
            validatedUserFields.phoneNumber = '';
        const updateUserProfileResponse = yield updateUserProfileFields(jwtToken, userEnvironmentId || environmentId, Object.assign(Object.assign({}, validatedUserFields), { metadata }));
        // check if decoded JWT still somehow has missing fields, we can't proceed if it does
        const decodedJwt = decodeJwt(updateUserProfileResponse.jwt);
        const missingFields = (_a = decodedJwt === null || decodedJwt === void 0 ? void 0 : decodedJwt.missingFields) !== null && _a !== void 0 ? _a : [];
        const requiredVerificationDestination = isVerificationRequired(updateUserProfileResponse);
        if (requiredVerificationDestination)
            return handleVerificationRequired({
                destination: requiredVerificationDestination,
                missingFields,
                updateUserProfileResponse,
            });
        // If verification is not needed then we can update the user profile immediately.
        yield updateUserProfileByJWT(updateUserProfileResponse.jwt);
        return {
            isEmailVerificationRequired: false,
            isSmsVerificationRequired: false,
            missingFields,
            updateUserProfileResponse,
        };
    }), [
        validationSchemaStripUnknown,
        selectedPhoneCountry,
        jwtToken,
        environmentId,
        handleVerificationRequired,
        updateUserProfileByJWT,
    ]);
};

export { useUpdateUser };
