import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { useState } from 'react';
import '@dynamic-labs/sdk-api';
import { logger } from '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '../../constants/colors.js';
import '../../constants/values.js';
import '../../../shared/utils/classes/storage/localStorage.js';
import '@dynamic-labs/utils';
import '../../../shared/consts/index.js';

const useValidateSession = ({ handleLogOut, user, authToken, }) => {
    const [hasLoggedOut, setHasLoggedOut] = useState(false);
    if (hasLoggedOut) {
        return;
    }
    const logout = (reason, params) => __awaiter(void 0, void 0, void 0, function* () {
        setHasLoggedOut(true);
        logger.debug(`Logging out - Reason: ${reason}`, Object.assign({}, params));
        yield handleLogOut();
    });
    const handleUserDataOutOfSync = () => __awaiter(void 0, void 0, void 0, function* () {
        if (authToken || !user) {
            return;
        }
        yield logout('user data out of sync', {
            authToken,
            user,
        });
    });
    handleUserDataOutOfSync();
};

export { useValidateSession };
