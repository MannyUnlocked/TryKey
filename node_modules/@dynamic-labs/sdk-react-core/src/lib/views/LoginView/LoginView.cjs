'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var reactI18next = require('react-i18next');
var sdkApi = require('@dynamic-labs/sdk-api');
var utils = require('@dynamic-labs/utils');
var classNames = require('../../utils/functions/classNames/classNames.cjs');
require('../../events/dynamicEvents.cjs');
require('../../../../_virtual/_tslib.cjs');
require('../../context/DynamicContext/DynamicContext.cjs');
require('../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
var ViewContext = require('../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../utils/constants/colors.cjs');
require('../../utils/constants/values.cjs');
require('../../shared/utils/classes/storage/localStorage.cjs');
require('../../shared/consts/index.cjs');
require('../../context/CaptchaContext/CaptchaContext.cjs');
var ErrorContext = require('../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('viem');
require('viem/chains');
require('../../config/ApiEndpoint.cjs');
require('../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../context/WalletContext/WalletContext.cjs');
require('../../context/ThemeContext/ThemeContext.cjs');
require('@dynamic-labs/types');
require('yup');
require('../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../context/MockContext/MockContext.cjs');
require('../../utils/hooks/useUserUpdateRequest/useUpdateUser/useUpdateUser.cjs');
require('../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../context/UserWalletsContext/UserWalletsContext.cjs');
require('i18next');
var Typography = require('../../components/Typography/Typography.cjs');
require('../../components/ShadowDOM/ShadowDOM.cjs');
require('../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../context/FooterAnimationContext/index.cjs');
var useAuthLayoutChecks = require('../../utils/hooks/useAuthLayoutChecks/useAuthLayoutChecks.cjs');
require('../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('react-focus-lock');
var Divider = require('../../components/Divider/Divider.cjs');
var LoadingContext = require('../../context/LoadingContext/LoadingContext.cjs');
require('../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../components/IconButton/IconButton.cjs');
require('../../components/MenuList/Dropdown/Dropdown.cjs');
var ErrorContainer = require('../../components/ErrorContainer/ErrorContainer.cjs');
require('formik');
require('../TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../components/Alert/Alert.cjs');
require('../../components/Input/Input.cjs');
require('../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../context/PasskeyContext/PasskeyContext.cjs');
require('../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
require('../../components/InlineWidget/InlineWidget.cjs');
require('../../components/IsBrowser/IsBrowser.cjs');
require('../../components/PhoneNumberField/usePhoneInputLogic/usePhoneInputLogic.cjs');
require('../../components/Popper/Popper/Popper.cjs');
require('../../components/Popper/PopperContext/PopperContext.cjs');
require('qrcode');
var WalletList = require('../WalletList/WalletList.cjs');
var LoginEmailForm = require('./sections/EmailSignInSection/LoginEmailForm.cjs');
require('../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
var DefaultFooter = require('../../layout/DynamicAuthLayout/DefaultFooter/DefaultFooter.cjs');
var PhoneNumberSignInSection = require('./sections/PhoneNumberSignInSection/PhoneNumberSignInSection.cjs');
var SocialSignInSection = require('./sections/SocialSignInSection/SocialSignInSection.cjs');
var ToggleableSection = require('./sections/ToggleableSection/ToggleableSection.cjs');
var WalletSignInSection = require('./sections/WalletSignInSection/WalletSignInSection.cjs');
var useLoginView = require('./useLoginView/useLoginView.cjs');

const LoginView = () => {
    var _a;
    const { error } = ErrorContext.useErrorContext();
    const { loading } = LoadingContext.useLoadingContext();
    const { view, setView } = ViewContext.useViewContext();
    const { isWalletOnly, loginViewSections } = useLoginView.useLoginView();
    const { t } = reactI18next.useTranslation();
    const [showWalletList, setShowWalletList] = React.useState(isWalletOnly);
    const [isLoading, setIsLoading] = React.useState(loading);
    React.useEffect(() => {
        // toolkit log in with email was set to false
        if (isWalletOnly) {
            setView('login-with-wallet-only');
            setShowWalletList(true);
        }
        // returning from 'View all wallets' button
        if (!isWalletOnly && view.type === 'login-with-email-or-wallet') {
            setShowWalletList(false);
        }
        // toolkit log in with email was set back to true
        if (!isWalletOnly &&
            (!showWalletList || view.type === 'login-with-wallet-only')) {
            setView('login-with-email-or-wallet');
            setShowWalletList(false);
        }
    }, [isWalletOnly, view.type]);
    const { showDefaultFooter } = useAuthLayoutChecks.useAuthLayoutChecks();
    const numOfWallets = ((_a = loginViewSections.find((section) => section.type === sdkApi.SdkViewSectionType.Wallet)) === null || _a === void 0 ? void 0 : _a.numOfItemsToDisplay) || 0;
    const renderViewSections = React.useMemo(() => loginViewSections.map((viewSection, index) => {
        switch (viewSection.type) {
            case sdkApi.SdkViewSectionType.Separator:
                return (jsxRuntime.jsx(Divider.Divider, { text: viewSection.label }, `${viewSection.type}_${index}`));
            case sdkApi.SdkViewSectionType.Email:
                return (jsxRuntime.jsx(LoginEmailForm.LoginEmailForm, { onSubmit: () => setIsLoading(true), onSubmitError: () => setIsLoading(false), isLoading: isLoading }, `${viewSection.type}_${index}`));
            case sdkApi.SdkViewSectionType.Phone:
                return (jsxRuntime.jsx(PhoneNumberSignInSection.PhoneNumberSignInSection, { onSubmit: () => setIsLoading(true), onSubmitError: () => setIsLoading(false), isLoading: isLoading }, `${viewSection.type}_${index}`));
            case sdkApi.SdkViewSectionType.EmailAndPhone:
                return (jsxRuntime.jsx(ToggleableSection.ToggleableSection, { sections: [
                        {
                            button: t('dyn_login.email_or_phone.use_phone'),
                            buttonCopyKey: 'dyn_login.email_or_phone.use_phone',
                            component: (jsxRuntime.jsx(LoginEmailForm.LoginEmailForm, { onSubmit: () => setIsLoading(true), onSubmitError: () => setIsLoading(false), isLoading: isLoading })),
                            label: t('dyn_login.email_or_phone.prefer_phone'),
                            labelCopyKey: 'dyn_login.email_or_phone.prefer_phone',
                        },
                        {
                            button: t('dyn_login.email_or_phone.use_email'),
                            buttonCopyKey: 'dyn_login.email_or_phone.use_email',
                            component: (jsxRuntime.jsx(PhoneNumberSignInSection.PhoneNumberSignInSection, { onSubmit: () => setIsLoading(true), onSubmitError: () => setIsLoading(false), isLoading: isLoading })),
                            label: t('dyn_login.email_or_phone.prefer_email'),
                            labelCopyKey: 'dyn_login.email_or_phone.prefer_email',
                        },
                    ] }, `${viewSection.type}_${index}`));
            case sdkApi.SdkViewSectionType.Wallet:
                return (jsxRuntime.jsx(WalletSignInSection.WalletSignInSection, { numberOfItensToShow: viewSection.numOfItemsToDisplay || 0, onSubmit: () => {
                        setView('login-with-email-or-wallet-full-wallet-list'); // this view is just to show the back button
                        setShowWalletList(true);
                    }, isLoading: isLoading }, `${viewSection.type}_${index}`));
            case sdkApi.SdkViewSectionType.Social:
                return (jsxRuntime.jsx(SocialSignInSection.SocialSignInSection, { collapsedLayout: numOfWallets > 1, sectionData: viewSection }, `${viewSection.type}_${index}`));
            case sdkApi.SdkViewSectionType.Text:
                return (jsxRuntime.jsx(Typography.Typography, { variant: 'body_normal', color: 'secondary', align: viewSection.alignment, className: 'login-view__text', children: viewSection.label }, `${viewSection.type}_${index}`));
            default:
                return null;
        }
    }), [loginViewSections, isLoading, t, numOfWallets, setView]);
    if (showWalletList) {
        return jsxRuntime.jsx(WalletList.WalletList, {});
    }
    const shouldShowFooter = utils.isMobile() && showDefaultFooter;
    return (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [error && (jsxRuntime.jsx(ErrorContainer.ErrorContainer, { className: 'login-view__error-container', withIcon: false, children: error })), jsxRuntime.jsx("div", { className: classNames.classNames('login-view__container', {
                    'login-view__container--error': Boolean(error),
                }), children: jsxRuntime.jsx("div", { className: 'login-view__scroll', "data-testid": 'login-view-scroll', children: renderViewSections }) }), shouldShowFooter && jsxRuntime.jsx(DefaultFooter.DefaultFooter, { hideBorder: true })] }));
};

exports.LoginView = LoginView;
