import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { useState, useEffect, useMemo } from 'react';
import { useTranslation } from 'react-i18next';
import { SdkViewSectionType } from '@dynamic-labs/sdk-api';
import { isMobile } from '@dynamic-labs/utils';
import { classNames } from '../../utils/functions/classNames/classNames.js';
import '../../events/dynamicEvents.js';
import '../../../../_virtual/_tslib.js';
import '../../context/DynamicContext/DynamicContext.js';
import '../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import { useViewContext } from '../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '../../utils/constants/colors.js';
import '../../utils/constants/values.js';
import '../../shared/utils/classes/storage/localStorage.js';
import '../../shared/consts/index.js';
import '../../context/CaptchaContext/CaptchaContext.js';
import { useErrorContext } from '../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import 'viem';
import 'viem/chains';
import '../../config/ApiEndpoint.js';
import '../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../context/AccountExistsContext/AccountExistsContext.js';
import '../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../context/WalletContext/WalletContext.js';
import '../../context/ThemeContext/ThemeContext.js';
import '@dynamic-labs/types';
import 'yup';
import '../../context/FieldsStateContext/FieldsStateContext.js';
import '../../context/MockContext/MockContext.js';
import '../../utils/hooks/useUserUpdateRequest/useUpdateUser/useUpdateUser.js';
import '../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../context/UserWalletsContext/UserWalletsContext.js';
import 'i18next';
import { Typography } from '../../components/Typography/Typography.js';
import '../../components/ShadowDOM/ShadowDOM.js';
import '../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../context/FooterAnimationContext/index.js';
import { useAuthLayoutChecks } from '../../utils/hooks/useAuthLayoutChecks/useAuthLayoutChecks.js';
import '../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../context/WalletGroupContext/WalletGroupContext.js';
import '../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import 'react-focus-lock';
import { Divider } from '../../components/Divider/Divider.js';
import { useLoadingContext } from '../../context/LoadingContext/LoadingContext.js';
import '../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../components/IconButton/IconButton.js';
import '../../components/MenuList/Dropdown/Dropdown.js';
import { ErrorContainer } from '../../components/ErrorContainer/ErrorContainer.js';
import 'formik';
import '../TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../components/Alert/Alert.js';
import '../../components/Input/Input.js';
import '../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../context/PasskeyContext/PasskeyContext.js';
import '../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import '../../components/InlineWidget/InlineWidget.js';
import '../../components/IsBrowser/IsBrowser.js';
import '../../components/PhoneNumberField/usePhoneInputLogic/usePhoneInputLogic.js';
import '../../components/Popper/Popper/Popper.js';
import '../../components/Popper/PopperContext/PopperContext.js';
import 'qrcode';
import { WalletList } from '../WalletList/WalletList.js';
import { LoginEmailForm } from './sections/EmailSignInSection/LoginEmailForm.js';
import '../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import { DefaultFooter } from '../../layout/DynamicAuthLayout/DefaultFooter/DefaultFooter.js';
import { PhoneNumberSignInSection } from './sections/PhoneNumberSignInSection/PhoneNumberSignInSection.js';
import { SocialSignInSection } from './sections/SocialSignInSection/SocialSignInSection.js';
import { ToggleableSection } from './sections/ToggleableSection/ToggleableSection.js';
import { WalletSignInSection } from './sections/WalletSignInSection/WalletSignInSection.js';
import { useLoginView } from './useLoginView/useLoginView.js';

const LoginView = () => {
    var _a;
    const { error } = useErrorContext();
    const { loading } = useLoadingContext();
    const { view, setView } = useViewContext();
    const { isWalletOnly, loginViewSections } = useLoginView();
    const { t } = useTranslation();
    const [showWalletList, setShowWalletList] = useState(isWalletOnly);
    const [isLoading, setIsLoading] = useState(loading);
    useEffect(() => {
        // toolkit log in with email was set to false
        if (isWalletOnly) {
            setView('login-with-wallet-only');
            setShowWalletList(true);
        }
        // returning from 'View all wallets' button
        if (!isWalletOnly && view.type === 'login-with-email-or-wallet') {
            setShowWalletList(false);
        }
        // toolkit log in with email was set back to true
        if (!isWalletOnly &&
            (!showWalletList || view.type === 'login-with-wallet-only')) {
            setView('login-with-email-or-wallet');
            setShowWalletList(false);
        }
    }, [isWalletOnly, view.type]);
    const { showDefaultFooter } = useAuthLayoutChecks();
    const numOfWallets = ((_a = loginViewSections.find((section) => section.type === SdkViewSectionType.Wallet)) === null || _a === void 0 ? void 0 : _a.numOfItemsToDisplay) || 0;
    const renderViewSections = useMemo(() => loginViewSections.map((viewSection, index) => {
        switch (viewSection.type) {
            case SdkViewSectionType.Separator:
                return (jsx(Divider, { text: viewSection.label }, `${viewSection.type}_${index}`));
            case SdkViewSectionType.Email:
                return (jsx(LoginEmailForm, { onSubmit: () => setIsLoading(true), onSubmitError: () => setIsLoading(false), isLoading: isLoading }, `${viewSection.type}_${index}`));
            case SdkViewSectionType.Phone:
                return (jsx(PhoneNumberSignInSection, { onSubmit: () => setIsLoading(true), onSubmitError: () => setIsLoading(false), isLoading: isLoading }, `${viewSection.type}_${index}`));
            case SdkViewSectionType.EmailAndPhone:
                return (jsx(ToggleableSection, { sections: [
                        {
                            button: t('dyn_login.email_or_phone.use_phone'),
                            buttonCopyKey: 'dyn_login.email_or_phone.use_phone',
                            component: (jsx(LoginEmailForm, { onSubmit: () => setIsLoading(true), onSubmitError: () => setIsLoading(false), isLoading: isLoading })),
                            label: t('dyn_login.email_or_phone.prefer_phone'),
                            labelCopyKey: 'dyn_login.email_or_phone.prefer_phone',
                        },
                        {
                            button: t('dyn_login.email_or_phone.use_email'),
                            buttonCopyKey: 'dyn_login.email_or_phone.use_email',
                            component: (jsx(PhoneNumberSignInSection, { onSubmit: () => setIsLoading(true), onSubmitError: () => setIsLoading(false), isLoading: isLoading })),
                            label: t('dyn_login.email_or_phone.prefer_email'),
                            labelCopyKey: 'dyn_login.email_or_phone.prefer_email',
                        },
                    ] }, `${viewSection.type}_${index}`));
            case SdkViewSectionType.Wallet:
                return (jsx(WalletSignInSection, { numberOfItensToShow: viewSection.numOfItemsToDisplay || 0, onSubmit: () => {
                        setView('login-with-email-or-wallet-full-wallet-list'); // this view is just to show the back button
                        setShowWalletList(true);
                    }, isLoading: isLoading }, `${viewSection.type}_${index}`));
            case SdkViewSectionType.Social:
                return (jsx(SocialSignInSection, { collapsedLayout: numOfWallets > 1, sectionData: viewSection }, `${viewSection.type}_${index}`));
            case SdkViewSectionType.Text:
                return (jsx(Typography, { variant: 'body_normal', color: 'secondary', align: viewSection.alignment, className: 'login-view__text', children: viewSection.label }, `${viewSection.type}_${index}`));
            default:
                return null;
        }
    }), [loginViewSections, isLoading, t, numOfWallets, setView]);
    if (showWalletList) {
        return jsx(WalletList, {});
    }
    const shouldShowFooter = isMobile() && showDefaultFooter;
    return (jsxs(Fragment, { children: [error && (jsx(ErrorContainer, { className: 'login-view__error-container', withIcon: false, children: error })), jsx("div", { className: classNames('login-view__container', {
                    'login-view__container--error': Boolean(error),
                }), children: jsx("div", { className: 'login-view__scroll', "data-testid": 'login-view-scroll', children: renderViewSections }) }), shouldShowFooter && jsx(DefaultFooter, { hideBorder: true })] }));
};

export { LoginView };
