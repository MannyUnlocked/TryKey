'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../../_virtual/_tslib.cjs');
var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var reactI18next = require('react-i18next');
require('../../../../events/dynamicEvents.cjs');
require('@dynamic-labs/utils');
require('../../../../context/DynamicContext/DynamicContext.cjs');
require('@dynamic-labs/sdk-api');
var logger = require('../../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
var ViewContext = require('../../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../../../utils/constants/colors.cjs');
require('../../../../utils/constants/values.cjs');
require('../../../../shared/utils/classes/storage/localStorage.cjs');
require('../../../../shared/consts/index.cjs');
var useInternalDynamicContext = require('../../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');
var CaptchaContext = require('../../../../context/CaptchaContext/CaptchaContext.cjs');
var ErrorContext = require('../../../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
var isEmailProviderEnabled = require('../../../../utils/functions/isEmailProviderEnabled/isEmailProviderEnabled.cjs');
var isEmailValid = require('../../../../utils/functions/isEmailValid/isEmailValid.cjs');
require('viem');
require('viem/chains');
require('../../../../config/ApiEndpoint.cjs');
require('../../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
var findEmailOtpWalletConnector = require('../../../Passkey/utils/findEmailOtpWalletConnector/findEmailOtpWalletConnector.cjs');
require('../../../../context/WalletContext/WalletContext.cjs');
require('../../../../context/ThemeContext/ThemeContext.cjs');
require('@dynamic-labs/types');
require('yup');
require('../../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../../../context/MockContext/MockContext.cjs');
require('../../../../utils/hooks/useUserUpdateRequest/useUpdateUser/useUpdateUser.cjs');
require('../../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('i18next');
require('../../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../../context/FooterAnimationContext/index.cjs');
require('../../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('react-focus-lock');
require('../../../../context/LoadingContext/LoadingContext.cjs');
require('../../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../../../components/IconButton/IconButton.cjs');
require('../../../../components/MenuList/Dropdown/Dropdown.cjs');
require('formik');
var Button = require('../../../../components/Button/Button.cjs');
require('../../../TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../../../components/Alert/Alert.cjs');
var Input = require('../../../../components/Input/Input.cjs');
require('../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
var InlineSubmitButton = require('../../../../components/InlineSubmitButton/InlineSubmitButton.cjs');
require('../../../../components/InlineWidget/InlineWidget.cjs');
require('../../../../components/IsBrowser/IsBrowser.cjs');
require('../../../../components/PhoneNumberField/usePhoneInputLogic/usePhoneInputLogic.cjs');
require('../../../../components/Popper/Popper/Popper.cjs');
require('../../../../components/Popper/PopperContext/PopperContext.cjs');
require('qrcode');
require('../../../WalletList/WalletList.cjs');
var useEmailProvider = require('../../../../utils/hooks/useEmailProvider/useEmailProvider.cjs');
require('../../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../../../locale/locale.cjs');

const LoginEmailForm = ({ isLoading: isExternalLoading, onSubmit, onSubmitError, currentEmail, }) => {
    var _a, _b;
    const { t } = reactI18next.useTranslation();
    const { walletConnectorOptions, projectSettings } = useInternalDynamicContext.useInternalDynamicContext();
    const { view, setView } = ViewContext.useViewContext();
    const { setErrorMessage } = ErrorContext.useErrorContext();
    const { engageCaptcha } = CaptchaContext.useCaptchaContext();
    const [emailInput, setEmailInput] = React.useState(currentEmail !== null && currentEmail !== void 0 ? currentEmail : '');
    const [invalidEmail, setInvalidEmail] = React.useState(false);
    const emailWalletConnector = findEmailOtpWalletConnector.findEmailOtpWalletConnector(walletConnectorOptions);
    /** Indicates the state of the input relative to the user's interaction */
    const [isHovered, setIsHovered] = React.useState(false);
    const [isFocused, setIsFocused] = React.useState(false);
    const { handleEmailSubmitWithOptionalCaptcha, isEmailProviderLoading } = useEmailProvider.useEmailProvider({
        emailWalletConnector,
    });
    const isLoading = React.useMemo(() => isEmailProviderLoading || isExternalLoading, [isEmailProviderLoading, isExternalLoading]);
    const handleEmailOnChangeEvent = (event) => {
        const { value } = event.currentTarget;
        setEmailInput(value);
    };
    const handleEmailSubmitError = (error) => {
        if (error.code === 'invalid_email_address') {
            setInvalidEmail(true);
        }
        else {
            setErrorMessage(error.code);
        }
        logger.logger.debug(error);
        onSubmitError === null || onSubmitError === void 0 ? void 0 : onSubmitError();
    };
    const handleSubmit = (e) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        var _c;
        e.preventDefault();
        if (!isEmailValid.isEmailValid(emailInput)) {
            setInvalidEmail(true);
            return;
        }
        try {
            onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit();
            // we are making sure that the wallet connect is not magic as to not show captcha
            // until we have a request to our backend (useConnectAndSign)
            if (((_c = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.security.hCaptcha) === null || _c === void 0 ? void 0 : _c.enabled) &&
                (emailWalletConnector === null || emailWalletConnector === void 0 ? void 0 : emailWalletConnector.key) !== 'magicemailotp') {
                engageCaptcha({
                    authMethod: 'email',
                    onCaptchaSuccess: (captchaToken) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
                        try {
                            yield handleEmailSubmitWithOptionalCaptcha(emailInput, captchaToken);
                        }
                        catch (e) {
                            setView(view.type);
                            handleEmailSubmitError(e);
                        }
                    }),
                });
                return;
            }
            yield handleEmailSubmitWithOptionalCaptcha(emailInput);
        }
        catch (error) {
            handleEmailSubmitError(error);
        }
    });
    if (!isEmailProviderEnabled.isEmailProviderEnabled((_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.providers) !== null && _a !== void 0 ? _a : [])) {
        logger.logger.error('Failed to render EmailSignInSection - no sign in provider enabled');
        return null;
    }
    return (jsxRuntime.jsxs("form", { className: 'login-with-email-form', onSubmit: (e) => handleSubmit(e), children: [jsxRuntime.jsx(Input.Input, { id: 'email_field', value: emailInput, onChange: handleEmailOnChangeEvent, copykey: 'dyn_login.email_form.email_field.label', label: t('dyn_login.email_form.email_field.label'), error: invalidEmail, message: invalidEmail && t('dyn_login.helper.email_form.invalid_email'), suffix: jsxRuntime.jsx(InlineSubmitButton.InlineSubmitButton, { disabled: isLoading, highlighted: emailInput.length > 0, isFocused: isFocused, isHovered: isHovered }), disabled: isLoading, type: 'email', onPointerEnter: () => setIsHovered(true), onPointerLeave: () => setIsHovered(false), onFocus: () => setIsFocused(true), onBlur: () => setIsFocused(false) }), !((_b = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.design.modal) === null || _b === void 0 ? void 0 : _b.emailSubmitButtonInsideInput) && (jsxRuntime.jsx(Button.Button, { dataTestId: 'submit_button', buttonClassName: 'login-with-email-form__button', type: 'submit', loading: isLoading, disabled: isLoading || emailInput.length < 3, buttonVariant: 'brand-primary', buttonPadding: 'login-screen-height', expanded: true, copykey: 'dyn_login.email_form.submit_button.label', typographyProps: {
                    color: 'inherit',
                }, children: t('dyn_login.email_form.submit_button.label') }))] }));
};

exports.LoginEmailForm = LoginEmailForm;
