import { __awaiter } from '../../../../../../../_virtual/_tslib.js';
import { removeDialCode } from 'react-international-phone';
import { useTranslation } from 'react-i18next';
import { SmsVerificationError } from '@dynamic-labs/utils';
import { useCaptchaContext } from '../../../../../context/CaptchaContext/CaptchaContext.js';
import 'react';
import '../../../../../context/DynamicContext/DynamicContext.js';
import '@dynamic-labs/sdk-api';
import '../../../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import { useViewContext } from '../../../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '../../../../../utils/constants/colors.js';
import '../../../../../utils/constants/values.js';
import '../../../../../shared/utils/classes/storage/localStorage.js';
import '../../../../../shared/consts/index.js';
import '../../../../../events/dynamicEvents.js';
import '../../../../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import { formatPhone } from '../../../../../utils/functions/formatPhone/formatPhone.js';
import 'viem';
import 'viem/chains';
import { createSmsVerification } from '../../../../../data/api.js';
import '../../../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../../../context/AccountExistsContext/AccountExistsContext.js';
import { useVerification } from '../../../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../../../../context/WalletContext/WalletContext.js';
import '../../../../../context/ThemeContext/ThemeContext.js';
import '@dynamic-labs/types';
import 'yup';
import { useFields } from '../../../../CollectUserDataView/useFields.js';
import '../../../../../context/MockContext/MockContext.js';
import '../../../../../utils/hooks/useUserUpdateRequest/useUpdateUser/useUpdateUser.js';
import '../../../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../../../components/Alert/Alert.js';
import '../../../../../components/ShadowDOM/ShadowDOM.js';
import '../../../../../components/IconButton/IconButton.js';
import '../../../../../components/InlineWidget/InlineWidget.js';
import '../../../../../components/Input/Input.js';
import '../../../../../components/IsBrowser/IsBrowser.js';
import '../../../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../../../components/PhoneNumberField/usePhoneInputLogic/usePhoneInputLogic.js';
import '../../../../../components/Popper/Popper/Popper.js';
import '../../../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../../../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../../WalletList/WalletList.js';
import '../../../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import 'i18next';
import '@hcaptcha/react-hcaptcha';
import '../../../../../context/LoadingContext/LoadingContext.js';
import '../../../../../config/ApiEndpoint.js';
import '../../../../../context/FooterAnimationContext/index.js';
import '../../../../../locale/locale.js';
import { translation } from '../../../../../locale/en/translation.js';
import '../../../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../../../context/PasskeyContext/PasskeyContext.js';
import '../../../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../../TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import { useInternalDynamicContext } from '../../../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.js';

const useSubmitPhoneNumber = ({ onSubmit, onSubmitError, country, phone, setInvalidNumberMessage, }) => {
    const { engageCaptcha } = useCaptchaContext();
    const { view, setView } = useViewContext();
    const { environmentId, projectSettings } = useInternalDynamicContext();
    const { setDisplayedDestination, setVerificationUUID, setRetryData } = useVerification();
    const { fieldsConfig } = useFields();
    const { t } = useTranslation();
    const submitPhoneNumber = (captchaToken) => __awaiter(void 0, void 0, void 0, function* () {
        if (!country)
            return;
        try {
            const phoneNumber = removeDialCode({
                dialCode: country.dialCode,
                phone,
            });
            const { verificationUUID } = yield createSmsVerification({
                captchaToken,
                environmentId,
                isoCountryCode: country.iso2,
                phoneCountryCode: country.dialCode,
                phoneNumber,
            });
            setRetryData({
                dialCode: country.dialCode,
                iso2: country.iso2,
                phone: phoneNumber,
            });
            setView('login-with-sms-verification');
            setDisplayedDestination(formatPhone(phone));
            setVerificationUUID(verificationUUID);
            onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit();
        }
        catch (error) {
            setView(view.type);
            if (error instanceof SmsVerificationError) {
                let message = t('dyn_login.helper.phone_number_form.invalid_phone');
                // Use the code from error message if a translation for it exists
                if (error.code &&
                    error.code in translation.dyn_login.helper.phone_number_form)
                    message = t('dyn_login.helper.phone_number_form.' + error.code);
                setInvalidNumberMessage(message);
            }
            else if (typeof error === 'string')
                setInvalidNumberMessage(error);
            onSubmitError === null || onSubmitError === void 0 ? void 0 : onSubmitError();
        }
    });
    return (event) => __awaiter(void 0, void 0, void 0, function* () {
        var _a;
        if (!country)
            return;
        event.preventDefault();
        try {
            fieldsConfig.phoneNumber.validation.validateSync(phone);
        }
        catch (error) {
            const { message } = error;
            setInvalidNumberMessage(message);
            onSubmitError === null || onSubmitError === void 0 ? void 0 : onSubmitError();
            return;
        }
        if ((_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.security.hCaptcha) === null || _a === void 0 ? void 0 : _a.enabled) {
            engageCaptcha({
                authMethod: 'phone',
                onCaptchaSuccess: submitPhoneNumber,
            });
            return;
        }
        submitPhoneNumber();
    });
};

export { useSubmitPhoneNumber };
