import { jsx } from 'react/jsx-runtime';
import { useState } from 'react';
import { useTranslation } from 'react-i18next';
import { DynamicError } from '@dynamic-labs/utils';
import { isSendBalanceWalletConnector } from '@dynamic-labs/wallet-connector-core';
import '../../context/DynamicContext/DynamicContext.js';
import '@dynamic-labs/sdk-api';
import '../../shared/logger.js';
import '@dynamic-labs/iconic';
import '../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import { shortenWalletAddress } from '../../shared/utils/functions/shortenWalletAddress/shortenWalletAddress.js';
import '../../utils/constants/colors.js';
import '../../utils/constants/values.js';
import '../../shared/utils/classes/storage/localStorage.js';
import { useEffectOnce } from '../../shared/utils/hooks/useEffectOnce/useEffectOnce.js';
import '../../shared/consts/index.js';
import '../../events/dynamicEvents.js';
import '../../../../_virtual/_tslib.js';
import '../../context/CaptchaContext/CaptchaContext.js';
import '../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import 'viem';
import 'viem/chains';
import '../../config/ApiEndpoint.js';
import '../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../context/AccountExistsContext/AccountExistsContext.js';
import '../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../context/WalletContext/WalletContext.js';
import '../../context/ThemeContext/ThemeContext.js';
import '@dynamic-labs/types';
import 'yup';
import '../../context/FieldsStateContext/FieldsStateContext.js';
import '../../context/MockContext/MockContext.js';
import '../../utils/hooks/useUserUpdateRequest/useUpdateUser/useUpdateUser.js';
import '../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../context/UserWalletsContext/UserWalletsContext.js';
import '../../components/Alert/Alert.js';
import { Spinner } from '../../components/Spinner/spinner.js';
import { ChainIcon } from '../../components/ChainIcon/ChainIcon.js';
import '../../components/ShadowDOM/ShadowDOM.js';
import '../../components/IconButton/IconButton.js';
import '../../components/InlineWidget/InlineWidget.js';
import '../../components/Input/Input.js';
import '../../components/IsBrowser/IsBrowser.js';
import '../../components/MenuList/Dropdown/Dropdown.js';
import '../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../components/PhoneNumberField/usePhoneInputLogic/usePhoneInputLogic.js';
import '../../components/Popper/Popper/Popper.js';
import '../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import { useFetchChain } from '../../widgets/DynamicWidget/hooks/useFetchChain/useFetchChain.js';
import 'formik';
import '../WalletList/WalletList.js';
import '../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import 'i18next';
import '@hcaptcha/react-hcaptcha';
import '../../context/LoadingContext/LoadingContext.js';
import '../../context/FooterAnimationContext/index.js';
import '../../locale/locale.js';
import '../../context/WalletGroupContext/WalletGroupContext.js';
import '../../context/PasskeyContext/PasskeyContext.js';
import { SendBalancePageLayout } from '../../components/SendBalancePageLayout/SendBalancePageLayout.js';
import '../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import { TransactionConfirmationView } from '../TransactionConfirmationView/TransactionConfirmationView.js';
import { TransactionStatusLayout } from '../../components/TransactionStatusLayout/TransactionStatusLayout.js';
import '../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import { useNetworkDataFromWallet } from '../../utils/hooks/useNetworkDataFromWallet/useNetworkDataFromWallet.js';
import { useInternalDynamicContext } from '../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.js';

const SendBalanceView = ({ initialRecipientAddress = '', initialValue, onClickBack, onClickClose, onError, onSuccess, onDone, displayPoweredByDynamicFooter = false, }) => {
    const [stage, setStage] = useState('form');
    const { primaryWallet, walletUiUtils } = useInternalDynamicContext();
    const { t } = useTranslation();
    if (!primaryWallet) {
        throw new DynamicError('Primary wallet is not available, send balance cannot be displayed');
    }
    const walletConnector = primaryWallet.connector;
    if (!isSendBalanceWalletConnector(walletConnector)) {
        throw new DynamicError('Primary wallet is not eligible for this operation. It must implement ISendBalanceWalletConnector');
    }
    const { chain } = useFetchChain(walletConnector);
    const chainName = (chain === null || chain === void 0 ? void 0 : chain.name) || walletConnector.connectedChain;
    const [transaction, setTransaction] = useState(null);
    useEffectOnce(() => {
        walletConnector
            .createUiTransaction(primaryWallet.address)
            .then((transaction) => {
            if (initialRecipientAddress)
                transaction.to = initialRecipientAddress;
            if (initialValue)
                transaction.value = initialValue;
            setTransaction(transaction);
        })
            .catch((error) => {
            onError === null || onError === void 0 ? void 0 : onError(error);
        });
    });
    const networkData = useNetworkDataFromWallet(primaryWallet);
    if (!transaction || !networkData) {
        return (jsx("div", { className: 'send-balance-widget-view__spinner', "data-testid": 'send-balance-spinner', children: jsx(Spinner, {}) }));
    }
    const networkCurrency = networkData.nativeCurrency.symbol;
    const currencyIcon = chain && (jsx(ChainIcon, { chain: chain, chainName: chainName }));
    const buildFormStage = () => (jsx(SendBalancePageLayout, { transaction: transaction, onClickBack: onClickBack, networkName: networkData.vanityName || networkData.name, networkIcon: currencyIcon, networkCurrencyDecimals: networkData.nativeCurrency.decimals, currencySymbol: networkCurrency, walletAddress: shortenWalletAddress(primaryWallet.address, 3, 3), walletKey: primaryWallet.connector.key, onClickClose: onClickClose, displayPoweredByDynamicFooter: displayPoweredByDynamicFooter, onSubmit: () => setStage('confirmation') }));
    const buildTransactionStage = () => (jsx(TransactionConfirmationView, { walletConnector: primaryWallet.connector, transaction: transaction, mutation: () => {
            walletUiUtils.disabledConfirmationOnce();
            return transaction.submit();
        }, copykey: 'dyn_send_transaction.confirmation.title', title: t('dyn_send_transaction.confirmation.title'), onClickBack: () => setStage('form'), onError: onError, displayPoweredByDynamicFooter: displayPoweredByDynamicFooter, onSuccess: (receipt) => {
            onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(receipt);
            setStage('success');
        } }));
    const buildSuccessState = () => {
        var _a;
        return (jsx(TransactionStatusLayout, { amount: transaction.value ? transaction.format(transaction.value) : '0', destinationAddress: (_a = transaction.to) !== null && _a !== void 0 ? _a : '', networkCurrency: networkCurrency, networkName: chainName || '', NetworkIcon: currencyIcon, onClickClose: onClickClose, onDone: () => onDone === null || onDone === void 0 ? void 0 : onDone(), displayPoweredByDynamicFooter: displayPoweredByDynamicFooter }));
    };
    const getCurrentView = () => {
        switch (stage) {
            case 'form':
                return buildFormStage();
            case 'confirmation':
                return buildTransactionStage();
            case 'success':
                return buildSuccessState();
        }
    };
    return getCurrentView();
};

export { SendBalanceView };
