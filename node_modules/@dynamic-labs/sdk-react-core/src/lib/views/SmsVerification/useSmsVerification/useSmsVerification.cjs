'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var React = require('react');
var utils = require('@dynamic-labs/utils');
require('../../../context/DynamicContext/DynamicContext.cjs');
var decodeJwt = require('../../../shared/utils/functions/decodeJwt/decodeJwt.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
var ViewContext = require('../../../context/ViewContext/ViewContext.cjs');
var logger = require('../../../shared/logger.cjs');
require('@dynamic-labs/wallet-book');
require('../../../utils/constants/colors.cjs');
require('../../../utils/constants/values.cjs');
require('../../../shared/utils/classes/storage/localStorage.cjs');
require('@dynamic-labs/sdk-api');
require('../../../shared/consts/index.cjs');
var dynamicEvents = require('../../../events/dynamicEvents.cjs');
require('../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
var isTurnkeyEnabled = require('../../../utils/functions/isTurnkeyEnabled/isTurnkeyEnabled.cjs');
require('viem');
require('viem/chains');
var api = require('../../../data/api.cjs');
require('../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../context/AccountExistsContext/AccountExistsContext.cjs');
var useOtpVerificationRequest = require('../../../utils/hooks/authenticationHooks/useOtpVerificationRequest/useOtpVerificationRequest.cjs');
require('react-dom');
var useEmbeddedWallet = require('../../../utils/hooks/useEmbeddedWallet/useEmbeddedWallet.cjs');
require('../../../context/ThemeContext/ThemeContext.cjs');
var VerificationContext = require('../../../context/VerificationContext/VerificationContext.cjs');
var useMutation = require('../../../utils/hooks/useMutation/useMutation.cjs');
require('@dynamic-labs/types');
var useCreateUserProfileByJWTCallback = require('../../../utils/hooks/useCreateUserProfileByJWTCallback/useCreateUserProfileByJWTCallback.cjs');
require('yup');
require('react-i18next');
require('../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../../context/MockContext/MockContext.cjs');
require('../../../utils/hooks/useUserUpdateRequest/useUpdateUser/useUpdateUser.cjs');
require('../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../components/Alert/Alert.cjs');
require('../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../components/IconButton/IconButton.cjs');
require('../../../components/InlineWidget/InlineWidget.cjs');
require('../../../components/Input/Input.cjs');
require('../../../components/IsBrowser/IsBrowser.cjs');
require('../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../components/PhoneNumberField/usePhoneInputLogic/usePhoneInputLogic.cjs');
require('../../../components/Popper/Popper/Popper.cjs');
require('../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('../../../context/WalletContext/WalletContext.cjs');
require('formik');
require('../../WalletList/WalletList.cjs');
require('../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('i18next');
require('@hcaptcha/react-hcaptcha');
require('../../../context/LoadingContext/LoadingContext.cjs');
require('../../../config/ApiEndpoint.cjs');
require('../../../context/FooterAnimationContext/index.cjs');
require('../../../locale/locale.cjs');
require('../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
var useInternalDynamicContext = require('../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');

const sleepToShowSuccessMessage = () => utils.sleep(1500);
const useSmsVerification = (type) => {
    var _a, _b, _c, _d;
    const { verificationUUID, displayedDestination: formattedPhone, retryData, } = VerificationContext.useVerification();
    const { environmentId, handleLogOut, setOnboardingOnlyJwt, setCallback, setShowAuthFlow, projectSettings, authToken, onboardingOnlyJwt, } = useInternalDynamicContext.useInternalDynamicContext();
    const { setView, goToInitialView } = ViewContext.useViewContext();
    const { createUserProfileByJWT } = useCreateUserProfileByJWTCallback.useCreateUserProfileByJWTCallback();
    const [error, setError] = React.useState();
    const { createEmbeddedWallet } = useEmbeddedWallet.useEmbeddedWallet();
    const isTurnkeyProviderEnabled = isTurnkeyEnabled.isTurnkeyEnabled(projectSettings);
    const { verifyOtp } = useOtpVerificationRequest.useOtpVerificationRequest();
    const retryOneTimePassword = () => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        if (!verificationUUID || !retryData) {
            yield handleLogOut();
            goToInitialView();
            return;
        }
        api.retrySmsVerification({
            environmentId,
            isoCountryCode: retryData.iso2,
            phoneCountryCode: retryData.dialCode,
            phoneNumber: retryData.phone,
            verificationUUID,
        });
    });
    const submitOtpForVerification = React.useCallback((verificationToken) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        var _e, _f;
        if (!verificationUUID || (!authToken && !onboardingOnlyJwt)) {
            yield handleLogOut();
            goToInitialView();
            return false;
        }
        yield verifyOtp(verificationToken, 'sms', verificationUUID);
        if (onboardingOnlyJwt) {
            setOnboardingOnlyJwt(undefined);
            setCallback('authSuccess');
        }
        if (isTurnkeyProviderEnabled &&
            !((_f = (_e = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _e === void 0 ? void 0 : _e.embeddedWallets) === null || _f === void 0 ? void 0 : _f.automaticEmbeddedWalletCreation)) {
            setShowAuthFlow(false);
            return true;
        }
        // this function will check turnkey wallet enabled and create wallet if needed
        // if not enabled, it will throw an error.
        yield createEmbeddedWallet().catch(() => setShowAuthFlow(false));
        return true;
    }), [
        authToken,
        createEmbeddedWallet,
        goToInitialView,
        handleLogOut,
        isTurnkeyProviderEnabled,
        onboardingOnlyJwt,
        (_b = (_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _a === void 0 ? void 0 : _a.embeddedWallets) === null || _b === void 0 ? void 0 : _b.automaticEmbeddedWalletCreation,
        setCallback,
        setOnboardingOnlyJwt,
        setShowAuthFlow,
        verificationUUID,
        verifyOtp,
    ]);
    const submitOtpForLogin = React.useCallback((verificationToken) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        var _g, _h;
        if (!verificationUUID) {
            yield handleLogOut();
            goToInitialView();
            return false;
        }
        const { jwt } = yield api.signInWithSmsVerification({
            environmentId,
            verificationToken,
            verificationUUID,
        });
        if (!jwt) {
            yield handleLogOut();
            goToInitialView();
            return false;
        }
        const decodedJwt = decodeJwt.decodeJwt(jwt);
        if (decodedJwt === null || decodedJwt === void 0 ? void 0 : decodedJwt.missingFields.length) {
            setOnboardingOnlyJwt(jwt);
            yield sleepToShowSuccessMessage();
            setView('collect-user-data-login-no-wallet', {
                userIdentification: 'phoneNumber',
                userIdentificationOverride: formattedPhone,
            });
            return true;
        }
        setCallback('authSuccess');
        // this timeout is set to make sure that the user will see success message
        yield sleepToShowSuccessMessage();
        yield createUserProfileByJWT(jwt);
        if (isTurnkeyProviderEnabled &&
            !((_h = (_g = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _g === void 0 ? void 0 : _g.embeddedWallets) === null || _h === void 0 ? void 0 : _h.automaticEmbeddedWalletCreation)) {
            setShowAuthFlow(false);
            return true;
        }
        // this function will check turnkey wallet enabled and create wallet if needed
        // if not enabled, it will throw an error.
        yield createEmbeddedWallet().catch(() => setShowAuthFlow(false));
        return true;
    }), [
        createEmbeddedWallet,
        createUserProfileByJWT,
        environmentId,
        formattedPhone,
        goToInitialView,
        handleLogOut,
        isTurnkeyProviderEnabled,
        (_d = (_c = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _c === void 0 ? void 0 : _c.embeddedWallets) === null || _d === void 0 ? void 0 : _d.automaticEmbeddedWalletCreation,
        setCallback,
        setOnboardingOnlyJwt,
        setShowAuthFlow,
        setView,
        verificationUUID,
    ]);
    const { data: isValid, isLoading, mutate: onSubmit, } = useMutation.useMutation(type === 'login' ? submitOtpForLogin : submitOtpForVerification, {
        onFailure: (error) => {
            // TODO: as a follow up, maybe change this message based on the actual error
            setError(new Error('Incorrect verification code. Did you mistype it?'));
            if (retryData)
                dynamicEvents.dynamicEvents.emit('smsVerificationResult', false, retryData);
            else
                logger.logger.debug('WARNING: failed to emit smsVerificationResult for failure because retryData was undefined');
        },
        onSuccess: () => {
            if (retryData)
                dynamicEvents.dynamicEvents.emit('smsVerificationResult', true, retryData);
            else
                logger.logger.debug('WARNING: failed to emit smsVerificationResult for success because retryData was undefined');
        },
    });
    return {
        error,
        formattedPhone: formattedPhone !== null && formattedPhone !== void 0 ? formattedPhone : '',
        isLoading,
        isValid: Boolean(isValid),
        onSubmit,
        retryOneTimePassword,
        setError,
    };
};

exports.useSmsVerification = useSmsVerification;
