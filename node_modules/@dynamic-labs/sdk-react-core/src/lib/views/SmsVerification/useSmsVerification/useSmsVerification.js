import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { useState, useCallback } from 'react';
import { sleep } from '@dynamic-labs/utils';
import '../../../context/DynamicContext/DynamicContext.js';
import { decodeJwt } from '../../../shared/utils/functions/decodeJwt/decodeJwt.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import { useViewContext } from '../../../context/ViewContext/ViewContext.js';
import { logger } from '../../../shared/logger.js';
import '@dynamic-labs/wallet-book';
import '../../../utils/constants/colors.js';
import '../../../utils/constants/values.js';
import '../../../shared/utils/classes/storage/localStorage.js';
import '@dynamic-labs/sdk-api';
import '../../../shared/consts/index.js';
import { dynamicEvents } from '../../../events/dynamicEvents.js';
import '../../../context/CaptchaContext/CaptchaContext.js';
import '../../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import { isTurnkeyEnabled } from '../../../utils/functions/isTurnkeyEnabled/isTurnkeyEnabled.js';
import 'viem';
import 'viem/chains';
import { signInWithSmsVerification, retrySmsVerification } from '../../../data/api.js';
import '../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../context/AccountExistsContext/AccountExistsContext.js';
import { useOtpVerificationRequest } from '../../../utils/hooks/authenticationHooks/useOtpVerificationRequest/useOtpVerificationRequest.js';
import 'react-dom';
import { useEmbeddedWallet } from '../../../utils/hooks/useEmbeddedWallet/useEmbeddedWallet.js';
import '../../../context/ThemeContext/ThemeContext.js';
import { useVerification } from '../../../context/VerificationContext/VerificationContext.js';
import { useMutation } from '../../../utils/hooks/useMutation/useMutation.js';
import '@dynamic-labs/types';
import { useCreateUserProfileByJWTCallback } from '../../../utils/hooks/useCreateUserProfileByJWTCallback/useCreateUserProfileByJWTCallback.js';
import 'yup';
import 'react-i18next';
import '../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../context/MockContext/MockContext.js';
import '../../../utils/hooks/useUserUpdateRequest/useUpdateUser/useUpdateUser.js';
import '../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../components/Alert/Alert.js';
import '../../../components/ShadowDOM/ShadowDOM.js';
import '../../../components/IconButton/IconButton.js';
import '../../../components/InlineWidget/InlineWidget.js';
import '../../../components/Input/Input.js';
import '../../../components/IsBrowser/IsBrowser.js';
import '../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../components/PhoneNumberField/usePhoneInputLogic/usePhoneInputLogic.js';
import '../../../components/Popper/Popper/Popper.js';
import '../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import '../../../context/WalletContext/WalletContext.js';
import 'formik';
import '../../WalletList/WalletList.js';
import '../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import 'i18next';
import '@hcaptcha/react-hcaptcha';
import '../../../context/LoadingContext/LoadingContext.js';
import '../../../config/ApiEndpoint.js';
import '../../../context/FooterAnimationContext/index.js';
import '../../../locale/locale.js';
import '../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../context/PasskeyContext/PasskeyContext.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import { useInternalDynamicContext } from '../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.js';

const sleepToShowSuccessMessage = () => sleep(1500);
const useSmsVerification = (type) => {
    var _a, _b, _c, _d;
    const { verificationUUID, displayedDestination: formattedPhone, retryData, } = useVerification();
    const { environmentId, handleLogOut, setOnboardingOnlyJwt, setCallback, setShowAuthFlow, projectSettings, authToken, onboardingOnlyJwt, } = useInternalDynamicContext();
    const { setView, goToInitialView } = useViewContext();
    const { createUserProfileByJWT } = useCreateUserProfileByJWTCallback();
    const [error, setError] = useState();
    const { createEmbeddedWallet } = useEmbeddedWallet();
    const isTurnkeyProviderEnabled = isTurnkeyEnabled(projectSettings);
    const { verifyOtp } = useOtpVerificationRequest();
    const retryOneTimePassword = () => __awaiter(void 0, void 0, void 0, function* () {
        if (!verificationUUID || !retryData) {
            yield handleLogOut();
            goToInitialView();
            return;
        }
        retrySmsVerification({
            environmentId,
            isoCountryCode: retryData.iso2,
            phoneCountryCode: retryData.dialCode,
            phoneNumber: retryData.phone,
            verificationUUID,
        });
    });
    const submitOtpForVerification = useCallback((verificationToken) => __awaiter(void 0, void 0, void 0, function* () {
        var _e, _f;
        if (!verificationUUID || (!authToken && !onboardingOnlyJwt)) {
            yield handleLogOut();
            goToInitialView();
            return false;
        }
        yield verifyOtp(verificationToken, 'sms', verificationUUID);
        if (onboardingOnlyJwt) {
            setOnboardingOnlyJwt(undefined);
            setCallback('authSuccess');
        }
        if (isTurnkeyProviderEnabled &&
            !((_f = (_e = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _e === void 0 ? void 0 : _e.embeddedWallets) === null || _f === void 0 ? void 0 : _f.automaticEmbeddedWalletCreation)) {
            setShowAuthFlow(false);
            return true;
        }
        // this function will check turnkey wallet enabled and create wallet if needed
        // if not enabled, it will throw an error.
        yield createEmbeddedWallet().catch(() => setShowAuthFlow(false));
        return true;
    }), [
        authToken,
        createEmbeddedWallet,
        goToInitialView,
        handleLogOut,
        isTurnkeyProviderEnabled,
        onboardingOnlyJwt,
        (_b = (_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _a === void 0 ? void 0 : _a.embeddedWallets) === null || _b === void 0 ? void 0 : _b.automaticEmbeddedWalletCreation,
        setCallback,
        setOnboardingOnlyJwt,
        setShowAuthFlow,
        verificationUUID,
        verifyOtp,
    ]);
    const submitOtpForLogin = useCallback((verificationToken) => __awaiter(void 0, void 0, void 0, function* () {
        var _g, _h;
        if (!verificationUUID) {
            yield handleLogOut();
            goToInitialView();
            return false;
        }
        const { jwt } = yield signInWithSmsVerification({
            environmentId,
            verificationToken,
            verificationUUID,
        });
        if (!jwt) {
            yield handleLogOut();
            goToInitialView();
            return false;
        }
        const decodedJwt = decodeJwt(jwt);
        if (decodedJwt === null || decodedJwt === void 0 ? void 0 : decodedJwt.missingFields.length) {
            setOnboardingOnlyJwt(jwt);
            yield sleepToShowSuccessMessage();
            setView('collect-user-data-login-no-wallet', {
                userIdentification: 'phoneNumber',
                userIdentificationOverride: formattedPhone,
            });
            return true;
        }
        setCallback('authSuccess');
        // this timeout is set to make sure that the user will see success message
        yield sleepToShowSuccessMessage();
        yield createUserProfileByJWT(jwt);
        if (isTurnkeyProviderEnabled &&
            !((_h = (_g = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _g === void 0 ? void 0 : _g.embeddedWallets) === null || _h === void 0 ? void 0 : _h.automaticEmbeddedWalletCreation)) {
            setShowAuthFlow(false);
            return true;
        }
        // this function will check turnkey wallet enabled and create wallet if needed
        // if not enabled, it will throw an error.
        yield createEmbeddedWallet().catch(() => setShowAuthFlow(false));
        return true;
    }), [
        createEmbeddedWallet,
        createUserProfileByJWT,
        environmentId,
        formattedPhone,
        goToInitialView,
        handleLogOut,
        isTurnkeyProviderEnabled,
        (_d = (_c = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _c === void 0 ? void 0 : _c.embeddedWallets) === null || _d === void 0 ? void 0 : _d.automaticEmbeddedWalletCreation,
        setCallback,
        setOnboardingOnlyJwt,
        setShowAuthFlow,
        setView,
        verificationUUID,
    ]);
    const { data: isValid, isLoading, mutate: onSubmit, } = useMutation(type === 'login' ? submitOtpForLogin : submitOtpForVerification, {
        onFailure: (error) => {
            // TODO: as a follow up, maybe change this message based on the actual error
            setError(new Error('Incorrect verification code. Did you mistype it?'));
            if (retryData)
                dynamicEvents.emit('smsVerificationResult', false, retryData);
            else
                logger.debug('WARNING: failed to emit smsVerificationResult for failure because retryData was undefined');
        },
        onSuccess: () => {
            if (retryData)
                dynamicEvents.emit('smsVerificationResult', true, retryData);
            else
                logger.debug('WARNING: failed to emit smsVerificationResult for success because retryData was undefined');
        },
    });
    return {
        error,
        formattedPhone: formattedPhone !== null && formattedPhone !== void 0 ? formattedPhone : '',
        isLoading,
        isValid: Boolean(isValid),
        onSubmit,
        retryOneTimePassword,
        setError,
    };
};

export { useSmsVerification };
