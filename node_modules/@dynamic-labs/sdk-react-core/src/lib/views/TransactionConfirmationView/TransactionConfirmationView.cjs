'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var reactI18next = require('react-i18next');
var utils = require('@dynamic-labs/utils');
var walletConnectorCore = require('@dynamic-labs/wallet-connector-core');
require('../../context/DynamicContext/DynamicContext.cjs');
require('@dynamic-labs/sdk-api');
var logger = require('../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
var shortenWalletAddress = require('../../shared/utils/functions/shortenWalletAddress/shortenWalletAddress.cjs');
require('../../utils/constants/colors.cjs');
require('../../utils/constants/values.cjs');
require('../../shared/utils/classes/storage/localStorage.cjs');
var useEffectOnce = require('../../shared/utils/hooks/useEffectOnce/useEffectOnce.cjs');
require('../../shared/consts/index.cjs');
require('../../events/dynamicEvents.cjs');
require('../../../../_virtual/_tslib.cjs');
require('../../context/CaptchaContext/CaptchaContext.cjs');
require('../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
var getAppOrigin = require('../../utils/functions/getAppOrigin/getAppOrigin.cjs');
require('react-international-phone');
require('viem');
require('viem/chains');
require('../../config/ApiEndpoint.cjs');
require('../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../context/WalletContext/WalletContext.cjs');
var usePromise = require('../../utils/hooks/usePromise/usePromise.cjs');
require('../../context/ThemeContext/ThemeContext.cjs');
var useForceUpdate = require('../../utils/hooks/useForceUpdate/useForceUpdate.cjs');
var useInterval = require('../../utils/hooks/useInterval/useInterval.cjs');
var useMutation = require('../../utils/hooks/useMutation/useMutation.cjs');
require('@dynamic-labs/types');
require('yup');
require('../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../context/MockContext/MockContext.cjs');
require('../../utils/hooks/useUserUpdateRequest/useUpdateUser/useUpdateUser.cjs');
require('../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../context/UserWalletsContext/UserWalletsContext.cjs');
var Alert = require('../../components/Alert/Alert.cjs');
var ChainIcon = require('../../components/ChainIcon/ChainIcon.cjs');
require('../../components/ShadowDOM/ShadowDOM.cjs');
require('../../components/IconButton/IconButton.cjs');
require('../../components/InlineWidget/InlineWidget.cjs');
require('../../components/Input/Input.cjs');
require('../../components/IsBrowser/IsBrowser.cjs');
require('../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../components/PhoneNumberField/usePhoneInputLogic/usePhoneInputLogic.cjs');
require('../../components/Popper/Popper/Popper.cjs');
require('../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
var useFetchChain = require('../../widgets/DynamicWidget/hooks/useFetchChain/useFetchChain.cjs');
var useFetchCurrency = require('../../widgets/DynamicWidget/hooks/useFetchCurrency/useFetchCurrency.cjs');
require('formik');
require('../WalletList/WalletList.cjs');
require('../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('i18next');
require('@hcaptcha/react-hcaptcha');
require('../../context/LoadingContext/LoadingContext.cjs');
require('../../context/FooterAnimationContext/index.cjs');
require('../../locale/locale.cjs');
require('../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../context/PasskeyContext/PasskeyContext.cjs');
var TransactionConfirmationPageLayout = require('../../components/TransactionConfirmationPageLayout/TransactionConfirmationPageLayout.cjs');
var TransactionRow = require('../../components/TransactionConfirmationPageLayout/components/TransactionRow/TransactionRow.cjs');
require('../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
var useTransactionTotal = require('./hooks/useTransactionTotal/useTransactionTotal.cjs');
var transactionErrorMessage = require('./helpers/transactionErrorMessage.cjs');
require('../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
var useInternalDynamicContext = require('../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');

const DEFAULT_PRECISION = 10;
const FEE_REFRESH_INTERVAL = 20000;
const TransactionConfirmationView = ({ transaction, onError, onSuccess, mutation, onClickBack, walletConnector, onClickClose, title, displayPoweredByDynamicFooter = false, copykey, }) => {
    const { appName, appLogoUrl } = useInternalDynamicContext.useInternalDynamicContext();
    const appOrigin = getAppOrigin.getAppOrigin();
    const [isGasSponsored, setIsGasSponsored] = React.useState(false);
    const update = useForceUpdate.useForceUpdate();
    const { t } = reactI18next.useTranslation();
    const { currency: currencySymbol } = useFetchCurrency.useFetchCurrency(walletConnector);
    /**
     * Update transaction fee and trigger a react update
     * to reflect the new fee on the UI
     */
    const fetchTransactionFee = () => {
        transaction.fetchFee().finally(update);
    };
    const { isLoading: isGasSponsoredLoading } = usePromise.usePromise(() => {
        if (!walletConnectorCore.isAccountAbstractionConnector(walletConnector)) {
            return false;
        }
        return walletConnector.canSponsorTransactionGas(transaction);
    }, {
        onReject: logger.logger.error,
        onResolve: (isGasSponsored) => {
            setIsGasSponsored(isGasSponsored);
            if (!isGasSponsored && walletConnectorCore.isAccountAbstractionConnector(walletConnector)) {
                walletConnector.disableGasSponsorshipOnce();
            }
        },
    });
    const { mutate: send, isLoading, error: transactionError, } = useMutation.useMutation(mutation, {
        onFailure: (error) => {
            fetchTransactionFee();
            if (utils.TransactionGasCannotBeSponsoredError.isInstance(error)) {
                logger.logger.debug(error);
                setIsGasSponsored(false);
                if (walletConnectorCore.isAccountAbstractionConnector(walletConnector)) {
                    walletConnector.disableGasSponsorshipOnce();
                }
            }
            logger.logger.error(error);
            onError === null || onError === void 0 ? void 0 : onError(error);
        },
        onSuccess: (tx) => onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(tx),
    });
    // Refresh transaction fee
    useInterval.useInterval(fetchTransactionFee, isLoading ? null : FEE_REFRESH_INTERVAL);
    useEffectOnce.useEffectOnce(fetchTransactionFee);
    const total = useTransactionTotal.useTransactionTotal({
        gasTotalPrice: transaction.fee.gas,
        isGasSponsored,
        transactionValue: transaction.value,
    });
    const { chain } = useFetchChain.useFetchChain(walletConnector);
    const chainName = (chain === null || chain === void 0 ? void 0 : chain.name) || walletConnector.connectedChain;
    const errorMessage = transactionError && transactionErrorMessage.transactionErrorMessage(transactionError);
    const { data: balance, isLoading: isBalanceLoading } = usePromise.usePromise(() => transaction.getBalance());
    const hasInsufficientFunds = React.useMemo(() => {
        if (!total || !balance)
            return false;
        return balance < total;
    }, [balance, total]);
    const missingFunds = React.useMemo(() => {
        if (!total || !balance)
            return undefined;
        return total - balance;
    }, [total, balance]);
    const alert = React.useMemo(() => {
        if (errorMessage)
            return null;
        if (utils.TransactionGasCannotBeSponsoredError.isInstance(transactionError)) {
            return (jsxRuntime.jsx(Alert.Alert, { icon: 'error', variant: 'error', copykey: 'dyn_send_transaction.error_message.gas_not_sponsored', children: t('dyn_send_transaction.error_message.gas_not_sponsored') }));
        }
        const showInsufficientFundsWarningMessage = hasInsufficientFunds && missingFunds;
        if (!showInsufficientFundsWarningMessage)
            return;
        const amountLeft = transaction.format(missingFunds, { precision: 5 });
        return (jsxRuntime.jsx(Alert.Alert, { icon: 'error', variant: 'warning', contentDataTestId: 'warning_content', copykey: 'dyn_send_transaction.warning_message.insufficient_funds', children: t('dyn_send_transaction.warning_message.insufficient_funds', {
                amountLeft,
                currencySymbol,
            }) }));
    }, [
        errorMessage,
        transactionError,
        hasInsufficientFunds,
        missingFunds,
        transaction,
        t,
        currencySymbol,
    ]);
    return (jsxRuntime.jsxs(TransactionConfirmationPageLayout.TransactionConfirmationPageLayout, { onClickBack: onClickBack, onClickClose: onClickClose, copykey: copykey, title: title, appOrigin: appOrigin, appName: appName, appLogoUrl: appLogoUrl, isLoading: isLoading, onClickSend: () => send(), displayPoweredByDynamicFooter: displayPoweredByDynamicFooter, disableSendButton: isBalanceLoading, error: errorMessage, alert: alert, children: [jsxRuntime.jsx(TransactionRow.TransactionRow, { copykey: 'dyn_send_transaction.confirmation.data.from', label: t('dyn_send_transaction.confirmation.data.from'), title: transaction.from, children: shortenWalletAddress.shortenWalletAddress(transaction.from, 4, 4) }), jsxRuntime.jsx(TransactionRow.TransactionRow, { copykey: 'dyn_send_transaction.confirmation.data.to', label: t('dyn_send_transaction.confirmation.data.to'), title: transaction.to, children: transaction.to &&
                    transaction.to === 'dyn_send_transaction.multiple_recipients'
                    ? t('dyn_send_transaction.multiple_recipients')
                    : shortenWalletAddress.shortenWalletAddress(transaction.to, 4, 4) }), jsxRuntime.jsx(TransactionRow.TransactionRow, { copykey: 'dyn_send_transaction.confirmation.data.amount', label: t('dyn_send_transaction.confirmation.data.amount'), isEmpty: !transaction.value, title: transaction.value ? transaction.format(transaction.value) : undefined, suffix: currencySymbol, icon: chain && jsxRuntime.jsx(ChainIcon.ChainIcon, { chain: chain, chainName: chainName }), dataTestId: 'transaction-amount', children: transaction.value
                    ? transaction.format(transaction.value, {
                        precision: DEFAULT_PRECISION,
                    })
                    : 0 }), !isGasSponsored && (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsx(TransactionRow.TransactionRow, { copykey: 'dyn_send_transaction.confirmation.data.gas_estimate', label: t('dyn_send_transaction.confirmation.data.gas_estimate'), isEmpty: !transaction.fee.gas, isLoading: isGasSponsoredLoading, title: transaction.fee.gas
                            ? transaction.format(transaction.fee.gas)
                            : undefined, suffix: transaction.fee.gas ? currencySymbol : undefined, icon: transaction.fee.gas
                            ? chain && jsxRuntime.jsx(ChainIcon.ChainIcon, { chain: chain, chainName: chainName })
                            : undefined, dataTestId: 'transaction-estimated-gas-fee', children: transaction.fee.gas
                            ? transaction.format(transaction.fee.gas, {
                                precision: DEFAULT_PRECISION,
                            })
                            : '--' }), jsxRuntime.jsx(TransactionRow.TransactionRow, { copykey: 'dyn_send_transaction.confirmation.data.total', label: t('dyn_send_transaction.confirmation.data.total'), isEmpty: !total, title: total ? transaction.format(total) : undefined, suffix: total ? currencySymbol : undefined, icon: total
                            ? chain && jsxRuntime.jsx(ChainIcon.ChainIcon, { chain: chain, chainName: chainName })
                            : undefined, dataTestId: 'transaction-total', children: total
                            ? transaction.format(total, { precision: DEFAULT_PRECISION })
                            : t('dyn_send_transaction.confirmation.not_applied') })] }))] }));
};

exports.FEE_REFRESH_INTERVAL = FEE_REFRESH_INTERVAL;
exports.TransactionConfirmationView = TransactionConfirmationView;
