import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { useState, useMemo } from 'react';
import { useTranslation } from 'react-i18next';
import { TransactionGasCannotBeSponsoredError } from '@dynamic-labs/utils';
import { isAccountAbstractionConnector } from '@dynamic-labs/wallet-connector-core';
import '../../context/DynamicContext/DynamicContext.js';
import '@dynamic-labs/sdk-api';
import { logger } from '../../shared/logger.js';
import '@dynamic-labs/iconic';
import '../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import { shortenWalletAddress } from '../../shared/utils/functions/shortenWalletAddress/shortenWalletAddress.js';
import '../../utils/constants/colors.js';
import '../../utils/constants/values.js';
import '../../shared/utils/classes/storage/localStorage.js';
import { useEffectOnce } from '../../shared/utils/hooks/useEffectOnce/useEffectOnce.js';
import '../../shared/consts/index.js';
import '../../events/dynamicEvents.js';
import '../../../../_virtual/_tslib.js';
import '../../context/CaptchaContext/CaptchaContext.js';
import '../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import { getAppOrigin } from '../../utils/functions/getAppOrigin/getAppOrigin.js';
import 'react-international-phone';
import 'viem';
import 'viem/chains';
import '../../config/ApiEndpoint.js';
import '../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../context/AccountExistsContext/AccountExistsContext.js';
import '../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../context/WalletContext/WalletContext.js';
import { usePromise } from '../../utils/hooks/usePromise/usePromise.js';
import '../../context/ThemeContext/ThemeContext.js';
import { useForceUpdate } from '../../utils/hooks/useForceUpdate/useForceUpdate.js';
import { useInterval } from '../../utils/hooks/useInterval/useInterval.js';
import { useMutation } from '../../utils/hooks/useMutation/useMutation.js';
import '@dynamic-labs/types';
import 'yup';
import '../../context/FieldsStateContext/FieldsStateContext.js';
import '../../context/MockContext/MockContext.js';
import '../../utils/hooks/useUserUpdateRequest/useUpdateUser/useUpdateUser.js';
import '../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../context/UserWalletsContext/UserWalletsContext.js';
import { Alert } from '../../components/Alert/Alert.js';
import { ChainIcon } from '../../components/ChainIcon/ChainIcon.js';
import '../../components/ShadowDOM/ShadowDOM.js';
import '../../components/IconButton/IconButton.js';
import '../../components/InlineWidget/InlineWidget.js';
import '../../components/Input/Input.js';
import '../../components/IsBrowser/IsBrowser.js';
import '../../components/MenuList/Dropdown/Dropdown.js';
import '../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../components/PhoneNumberField/usePhoneInputLogic/usePhoneInputLogic.js';
import '../../components/Popper/Popper/Popper.js';
import '../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import { useFetchChain } from '../../widgets/DynamicWidget/hooks/useFetchChain/useFetchChain.js';
import { useFetchCurrency } from '../../widgets/DynamicWidget/hooks/useFetchCurrency/useFetchCurrency.js';
import 'formik';
import '../WalletList/WalletList.js';
import '../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import 'i18next';
import '@hcaptcha/react-hcaptcha';
import '../../context/LoadingContext/LoadingContext.js';
import '../../context/FooterAnimationContext/index.js';
import '../../locale/locale.js';
import '../../context/WalletGroupContext/WalletGroupContext.js';
import '../../context/PasskeyContext/PasskeyContext.js';
import { TransactionConfirmationPageLayout } from '../../components/TransactionConfirmationPageLayout/TransactionConfirmationPageLayout.js';
import { TransactionRow } from '../../components/TransactionConfirmationPageLayout/components/TransactionRow/TransactionRow.js';
import '../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import { useTransactionTotal } from './hooks/useTransactionTotal/useTransactionTotal.js';
import { transactionErrorMessage } from './helpers/transactionErrorMessage.js';
import '../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import { useInternalDynamicContext } from '../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.js';

const DEFAULT_PRECISION = 10;
const FEE_REFRESH_INTERVAL = 20000;
const TransactionConfirmationView = ({ transaction, onError, onSuccess, mutation, onClickBack, walletConnector, onClickClose, title, displayPoweredByDynamicFooter = false, copykey, }) => {
    const { appName, appLogoUrl } = useInternalDynamicContext();
    const appOrigin = getAppOrigin();
    const [isGasSponsored, setIsGasSponsored] = useState(false);
    const update = useForceUpdate();
    const { t } = useTranslation();
    const { currency: currencySymbol } = useFetchCurrency(walletConnector);
    /**
     * Update transaction fee and trigger a react update
     * to reflect the new fee on the UI
     */
    const fetchTransactionFee = () => {
        transaction.fetchFee().finally(update);
    };
    const { isLoading: isGasSponsoredLoading } = usePromise(() => {
        if (!isAccountAbstractionConnector(walletConnector)) {
            return false;
        }
        return walletConnector.canSponsorTransactionGas(transaction);
    }, {
        onReject: logger.error,
        onResolve: (isGasSponsored) => {
            setIsGasSponsored(isGasSponsored);
            if (!isGasSponsored && isAccountAbstractionConnector(walletConnector)) {
                walletConnector.disableGasSponsorshipOnce();
            }
        },
    });
    const { mutate: send, isLoading, error: transactionError, } = useMutation(mutation, {
        onFailure: (error) => {
            fetchTransactionFee();
            if (TransactionGasCannotBeSponsoredError.isInstance(error)) {
                logger.debug(error);
                setIsGasSponsored(false);
                if (isAccountAbstractionConnector(walletConnector)) {
                    walletConnector.disableGasSponsorshipOnce();
                }
            }
            logger.error(error);
            onError === null || onError === void 0 ? void 0 : onError(error);
        },
        onSuccess: (tx) => onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(tx),
    });
    // Refresh transaction fee
    useInterval(fetchTransactionFee, isLoading ? null : FEE_REFRESH_INTERVAL);
    useEffectOnce(fetchTransactionFee);
    const total = useTransactionTotal({
        gasTotalPrice: transaction.fee.gas,
        isGasSponsored,
        transactionValue: transaction.value,
    });
    const { chain } = useFetchChain(walletConnector);
    const chainName = (chain === null || chain === void 0 ? void 0 : chain.name) || walletConnector.connectedChain;
    const errorMessage = transactionError && transactionErrorMessage(transactionError);
    const { data: balance, isLoading: isBalanceLoading } = usePromise(() => transaction.getBalance());
    const hasInsufficientFunds = useMemo(() => {
        if (!total || !balance)
            return false;
        return balance < total;
    }, [balance, total]);
    const missingFunds = useMemo(() => {
        if (!total || !balance)
            return undefined;
        return total - balance;
    }, [total, balance]);
    const alert = useMemo(() => {
        if (errorMessage)
            return null;
        if (TransactionGasCannotBeSponsoredError.isInstance(transactionError)) {
            return (jsx(Alert, { icon: 'error', variant: 'error', copykey: 'dyn_send_transaction.error_message.gas_not_sponsored', children: t('dyn_send_transaction.error_message.gas_not_sponsored') }));
        }
        const showInsufficientFundsWarningMessage = hasInsufficientFunds && missingFunds;
        if (!showInsufficientFundsWarningMessage)
            return;
        const amountLeft = transaction.format(missingFunds, { precision: 5 });
        return (jsx(Alert, { icon: 'error', variant: 'warning', contentDataTestId: 'warning_content', copykey: 'dyn_send_transaction.warning_message.insufficient_funds', children: t('dyn_send_transaction.warning_message.insufficient_funds', {
                amountLeft,
                currencySymbol,
            }) }));
    }, [
        errorMessage,
        transactionError,
        hasInsufficientFunds,
        missingFunds,
        transaction,
        t,
        currencySymbol,
    ]);
    return (jsxs(TransactionConfirmationPageLayout, { onClickBack: onClickBack, onClickClose: onClickClose, copykey: copykey, title: title, appOrigin: appOrigin, appName: appName, appLogoUrl: appLogoUrl, isLoading: isLoading, onClickSend: () => send(), displayPoweredByDynamicFooter: displayPoweredByDynamicFooter, disableSendButton: isBalanceLoading, error: errorMessage, alert: alert, children: [jsx(TransactionRow, { copykey: 'dyn_send_transaction.confirmation.data.from', label: t('dyn_send_transaction.confirmation.data.from'), title: transaction.from, children: shortenWalletAddress(transaction.from, 4, 4) }), jsx(TransactionRow, { copykey: 'dyn_send_transaction.confirmation.data.to', label: t('dyn_send_transaction.confirmation.data.to'), title: transaction.to, children: transaction.to &&
                    transaction.to === 'dyn_send_transaction.multiple_recipients'
                    ? t('dyn_send_transaction.multiple_recipients')
                    : shortenWalletAddress(transaction.to, 4, 4) }), jsx(TransactionRow, { copykey: 'dyn_send_transaction.confirmation.data.amount', label: t('dyn_send_transaction.confirmation.data.amount'), isEmpty: !transaction.value, title: transaction.value ? transaction.format(transaction.value) : undefined, suffix: currencySymbol, icon: chain && jsx(ChainIcon, { chain: chain, chainName: chainName }), dataTestId: 'transaction-amount', children: transaction.value
                    ? transaction.format(transaction.value, {
                        precision: DEFAULT_PRECISION,
                    })
                    : 0 }), !isGasSponsored && (jsxs(Fragment, { children: [jsx(TransactionRow, { copykey: 'dyn_send_transaction.confirmation.data.gas_estimate', label: t('dyn_send_transaction.confirmation.data.gas_estimate'), isEmpty: !transaction.fee.gas, isLoading: isGasSponsoredLoading, title: transaction.fee.gas
                            ? transaction.format(transaction.fee.gas)
                            : undefined, suffix: transaction.fee.gas ? currencySymbol : undefined, icon: transaction.fee.gas
                            ? chain && jsx(ChainIcon, { chain: chain, chainName: chainName })
                            : undefined, dataTestId: 'transaction-estimated-gas-fee', children: transaction.fee.gas
                            ? transaction.format(transaction.fee.gas, {
                                precision: DEFAULT_PRECISION,
                            })
                            : '--' }), jsx(TransactionRow, { copykey: 'dyn_send_transaction.confirmation.data.total', label: t('dyn_send_transaction.confirmation.data.total'), isEmpty: !total, title: total ? transaction.format(total) : undefined, suffix: total ? currencySymbol : undefined, icon: total
                            ? chain && jsx(ChainIcon, { chain: chain, chainName: chainName })
                            : undefined, dataTestId: 'transaction-total', children: total
                            ? transaction.format(total, { precision: DEFAULT_PRECISION })
                            : t('dyn_send_transaction.confirmation.not_applied') })] }))] }));
};

export { FEE_REFRESH_INTERVAL, TransactionConfirmationView };
