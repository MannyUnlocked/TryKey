'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../_virtual/_tslib.cjs');
var web3_js = require('@solana/web3.js');
var utils = require('@dynamic-labs/utils');

const LAMPORTS_PER_SOL = 1000000000;
class SolanaUiTransaction {
    constructor({ onSubmit, from, connection, originalTransaction, }) {
        this.chain = 'SOL';
        this.data = undefined;
        this.fee = { gas: undefined };
        this.from = from;
        this.onSubmit = onSubmit;
        this.connection = connection;
        this.originalTransaction = originalTransaction;
    }
    parse(input) {
        return BigInt(parseFloat(input) * LAMPORTS_PER_SOL);
    }
    format(value, { precision } = {}) {
        return utils.formatNumberText(String(parseFloat(value.toString()) / LAMPORTS_PER_SOL), {
            precision,
        });
    }
    submit() {
        const sendTransaction = this.createTransaction();
        return this.onSubmit(sendTransaction);
    }
    getBalance() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            const publicKey = new web3_js.PublicKey(this.from);
            const balance = yield this.connection.getBalance(publicKey);
            return BigInt(balance);
        });
    }
    validateAddressFormat(address) {
        if (address === 'dyn_send_transaction.multiple_recipients') {
            return true;
        }
        return /^[1-9A-HJ-NP-Za-km-z]{32,44}$/.test(address);
    }
    fetchFee() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            const transaction = this.createTransactionSafe();
            if (!transaction) {
                return;
            }
            let compiledMessage;
            if ('version' in transaction) {
                compiledMessage = transaction.message;
            }
            else {
                const blockhash = yield this.connection.getLatestBlockhash();
                transaction.recentBlockhash = blockhash.blockhash;
                transaction.feePayer = new web3_js.PublicKey(this.from);
                compiledMessage = transaction.compileMessage();
            }
            if (!compiledMessage) {
                throw new Error('Invalid transaction');
            }
            const res = yield this.connection.getFeeForMessage(compiledMessage);
            this.fee.gas = BigInt(res.value);
        });
    }
    createTransaction() {
        const { value, to } = this;
        if (!value || !to) {
            throw new Error('Value is required');
        }
        if (this.originalTransaction) {
            return this.originalTransaction;
        }
        const sendTransaction = new web3_js.Transaction();
        const fromPubkey = new web3_js.PublicKey(this.from);
        const toPubkey = new web3_js.PublicKey(to);
        const lamports = value;
        sendTransaction.add(web3_js.SystemProgram.transfer({
            fromPubkey,
            lamports,
            toPubkey,
        }));
        return sendTransaction;
    }
    createTransactionSafe() {
        try {
            return this.createTransaction();
        }
        catch (error) {
            return undefined;
        }
    }
}

exports.LAMPORTS_PER_SOL = LAMPORTS_PER_SOL;
exports.SolanaUiTransaction = SolanaUiTransaction;
