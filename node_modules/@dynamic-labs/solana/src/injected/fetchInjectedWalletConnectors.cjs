'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var CoinbaseSolana = require('../CoinbaseSolana.cjs');
var Slope = require('../Slope.cjs');
var Solflare = require('../Solflare.cjs');
var InjectedWalletBase = require('./InjectedWalletBase.cjs');
var BackpackSol = require('./BackpackSol.cjs');

const injectedWalletOverrides = [
    CoinbaseSolana.CoinbaseSolana,
    Slope.Slope,
    BackpackSol.BackpackSol,
    Solflare.Solflare,
];
const filteredInjectedWalletKeysOverrides = [
    'coinbasesolana',
    'slope',
    'phantom',
    'phantomledger',
    'backpacksol',
    'solflare',
];
const fetchInjectedWalletConnectors = ({ walletBook, }) => {
    var _a;
    return Object.entries((_a = walletBook === null || walletBook === void 0 ? void 0 : walletBook.wallets) !== null && _a !== void 0 ? _a : {})
        .filter(([key, wallet]) => {
        var _a;
        return ((_a = wallet.injectedConfig) === null || _a === void 0 ? void 0 : _a.find((config) => config.chain === 'sol')) &&
            !filteredInjectedWalletKeysOverrides.includes(key);
    })
        .map(([key, wallet]) => {
        const { shortName } = wallet;
        const name = shortName || wallet.name;
        return class extends InjectedWalletBase.InjectedWalletBase {
            constructor(props) {
                super(Object.assign({}, props));
                this.name = name;
                this.wallet = wallet;
                // this is the key from the wallet book entry so that we don't purely rely on the normalized name
                this.overrideKey = key;
            }
        };
    });
};

exports.fetchInjectedWalletConnectors = fetchInjectedWalletConnectors;
exports.injectedWalletOverrides = injectedWalletOverrides;
