/// <reference lib="dom" />
export declare enum IframeEventType {
    PublicKeyReady = "PUBLIC_KEY_READY",
    InjectCredentialBundle = "INJECT_CREDENTIAL_BUNDLE",
    InjectKeyExportBundle = "INJECT_KEY_EXPORT_BUNDLE",
    InjectWalletExportBundle = "INJECT_WALLET_EXPORT_BUNDLE",
    BundleInjected = "BUNDLE_INJECTED",
    StampRequest = "STAMP_REQUEST",
    Stamp = "STAMP",
    Error = "ERROR"
}
type TStamp = {
    stampHeaderName: string;
    stampHeaderValue: string;
};
export type TIframeStamperConfig = {
    iframeUrl: string;
    iframeElementId: string;
    iframeContainer: HTMLElement | null | undefined;
};
/**
 * Stamper to use with `@turnkey/http`'s `TurnkeyClient`
 * Creating a stamper inserts an iframe in the current page.
 */
export declare class IframeStamper {
    container: HTMLElement;
    iframe: HTMLIFrameElement;
    iframeOrigin: string;
    iframePublicKey: string | null;
    /**
     * Creates a new iframe stamper. This function _does not_ insert the iframe in the DOM.
     * Call `.init()` to insert the iframe element in the DOM.
     */
    constructor(config: TIframeStamperConfig);
    /**
     * Inserts the iframe on the page and returns a promise resolving to the iframe's public key
     */
    init(): Promise<string>;
    /**
     * Removes the iframe from the DOM
     */
    clear(): void;
    /**
     * Returns the public key, or `null` if the underlying iframe isn't properly initialized.
     */
    publicKey(): string | null;
    /**
     * Function to inject a new credential into the iframe
     * The bundle should be encrypted to the iframe's initial public key
     * Encryption should be performed with HPKE (RFC 9180).
     * This is used during recovery and auth flows.
     */
    injectCredentialBundle(bundle: string): Promise<boolean>;
    /**
     * Function to inject an export bundle into the iframe
     * The bundle should be encrypted to the iframe's initial public key
     * Encryption should be performed with HPKE (RFC 9180).
     * This is used during export flows.
     */
    injectKeyExportBundle(bundle: string): Promise<boolean>;
    /**
     * Function to inject an export bundle into the iframe
     * The bundle should be encrypted to the iframe's initial public key
     * Encryption should be performed with HPKE (RFC 9180).
     * This is used during export flows.
     */
    injectWalletExportBundle(bundle: string): Promise<boolean>;
    /**
     * Function to sign a payload with the underlying iframe
     */
    stamp(payload: string): Promise<TStamp>;
}
export {};
//# sourceMappingURL=index.d.ts.map